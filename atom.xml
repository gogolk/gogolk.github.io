<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gogolk</title>
  
  <subtitle>开弓没有回头箭</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-20T02:22:57.422Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PriceCompare</title>
    <link href="http://yoursite.com/2018/09/11/PriceCompare/"/>
    <id>http://yoursite.com/2018/09/11/PriceCompare/</id>
    <published>2018-09-11T12:53:01.000Z</published>
    <updated>2018-09-20T02:22:57.422Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;通过Pyhton编写爬虫实时爬取各大数字货币交易平台(火币网，币安网等等)的比特币和以太币等等价格，并做价格比对。<br><img src="/2018/09/11/PriceCompare/index.png" alt="img"><br><a id="more"></a>  </p><p>&emsp;&emsp;数据爬取一开始做的版本是设置一个间隔时间interval，每隔interval就向各个发送请求获得response再到response中解析所需，缺点是每次发送请求到获得response所需时间较长。分析各个交易网站后，他们更新数据都是用的websocket进行同行，所以果断改写通过websocket连接，实时接收服务器发送过来的信息，存入redis库。然后通过一个子进程获得所有最近的价格，另实现断开自动重连。注意：这些交易平台，其中<a href="http://www.bitfinex.com是需要挂代理的，详情见代码。" target="_blank" rel="noopener">www.bitfinex.com是需要挂代理的，详情见代码。</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#PriceSpiders</span></span><br><span class="line"><span class="comment">#将各个网站的价格信息实时存入redis中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriceSpiders</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment">#火币网 https://www.hbg.com/zh-cn</span></span><br><span class="line">    <span class="comment">#币夫网 https://www.bitforex.com/</span></span><br><span class="line">    <span class="comment">#币安网 https://www.binance.co/?ref=11295221</span></span><br><span class="line">    <span class="comment">#fcoin https://www.fcoin.com/</span></span><br><span class="line">    <span class="comment">#abcc https://abcc.com/  #vpn</span></span><br><span class="line">    <span class="comment">#bitfinex https://www.bitfinex.com/ #vpn</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>&#125;</span><br><span class="line">        self.proxies = &#123;<span class="string">'http'</span>:<span class="string">'127.0.0.1:1080'</span>,</span><br><span class="line">                        <span class="string">'https'</span>:<span class="string">'127.0.0.1:1080'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bitforex_price</span><span class="params">(self,coin)</span>:</span></span><br><span class="line">        <span class="comment">#币夫网 https://www.bitforex.com/</span></span><br><span class="line">        r = redis.Redis(connection_pool=redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> coin == <span class="string">'b'</span>:</span><br><span class="line">            coin = <span class="string">'btcusdt'</span></span><br><span class="line">        <span class="keyword">elif</span> coin == <span class="string">'e'</span>:</span><br><span class="line">            coin = <span class="string">'ethusdt'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'coin only b or e'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_open</span><span class="params">(ws)</span>:</span></span><br><span class="line">            ws.send(<span class="string">'[&#123;"type":"subHq_cancel_all","event":"kline"&#125;]'</span>)</span><br><span class="line">            time.sleep(<span class="number">0.2</span>)</span><br><span class="line">            ws.send(<span class="string">'[&#123;"type":"subHq","event":"kline","param":&#123;"businessType":"coin-usdt-%s","kType":"30min","size":1440&#125;&#125;]'</span> % coin[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_close</span><span class="params">(ws)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> coin == <span class="string">'btcusdt'</span>:</span><br><span class="line">            self.get_bitforex_price(<span class="string">'b'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                self.get_bitforex_price(<span class="string">'e'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(ws, massage)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(massage) &lt; <span class="number">1000</span>:</span><br><span class="line">                data = json.loads(massage)</span><br><span class="line">                price = data[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'close'</span>]</span><br><span class="line">                r.lpush(<span class="string">'Prices:bitforex:&#123;&#125;'</span>.format(coin.lower()), <span class="string">'&#123;:.2f&#125;'</span>.format(float(price)))</span><br><span class="line">                r.expire(<span class="string">'Prices:bitforex:&#123;&#125;'</span>.format(coin.lower()), <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_ping</span><span class="params">(ws)</span>:</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                time.sleep(<span class="number">10</span>)</span><br><span class="line">                ws.send(<span class="string">'ping_p'</span>)</span><br><span class="line"></span><br><span class="line">        app = websocket.WebSocketApp(<span class="string">'wss://wscn.bitforex.com/mkapi/coinGroup1/ws'</span>,</span><br><span class="line">                                      header=self.headers,</span><br><span class="line">                                      on_open=on_open,</span><br><span class="line">                                      on_message=on_message,</span><br><span class="line">                                      on_close=on_close,</span><br><span class="line">                                    )</span><br><span class="line">        t = threading.Thread(target=on_ping, args=(app,))</span><br><span class="line">        t.daemon = <span class="keyword">True</span></span><br><span class="line">        t.start()</span><br><span class="line">        app.run_forever()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_hbg_price</span><span class="params">(self,coin)</span>:</span></span><br><span class="line">        <span class="comment">#火币网 https://www.hbg.com/zh-cn</span></span><br><span class="line">        r = redis.Redis(connection_pool=redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> coin == <span class="string">'b'</span>:</span><br><span class="line">            coin = <span class="string">'btcusdt'</span></span><br><span class="line">        <span class="keyword">elif</span> coin == <span class="string">'e'</span>:</span><br><span class="line">            coin = <span class="string">'ethusdt'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'coin only b or e'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_open</span><span class="params">(ws)</span>:</span></span><br><span class="line">            ws.send(<span class="string">'&#123;"sub":"market.%s.detail"&#125;'</span> %coin)</span><br><span class="line">            time.sleep(<span class="number">0.2</span>)</span><br><span class="line">            ws.send(<span class="string">'[&#123;"type":"subHq","event":"kline","param":&#123;"businessType":"coin-usdt-%s","kType":"30min","size":1440&#125;&#125;]'</span> % coin[:<span class="number">3</span>])</span><br><span class="line">            <span class="comment">#ws.send('[&#123;"type": "subHq", "event": "trade", "param": &#123;"businessType": "coin-usdt-eth", "dType":0, "size": 100&#125;&#125;]')</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_close</span><span class="params">(ws)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> coin == <span class="string">'btcusdt'</span>:</span><br><span class="line">                self.get_hbg_price(<span class="string">'b'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.get_hbg_price(<span class="string">'e'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(ws, massage)</span>:</span></span><br><span class="line">            massage = bytes.decode(zlib.decompress(massage,<span class="number">16</span>+zlib.MAX_WBITS),encoding=<span class="string">'utf8'</span>)</span><br><span class="line">            <span class="keyword">if</span> json.loads(massage).__contains__(<span class="string">'ping'</span>):</span><br><span class="line">                ws.send(<span class="string">'"pong":%s'</span> % datetime.datetime.now().timestamp())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                price = json.loads(massage)[<span class="string">'tick'</span>][<span class="string">'close'</span>]</span><br><span class="line">                r.lpush(<span class="string">'Prices:hbg:&#123;&#125;'</span>.format(coin.lower()), <span class="string">'&#123;:.2f&#125;'</span>.format(float(price)))</span><br><span class="line">                r.expire(<span class="string">'Prices:hgb:&#123;&#125;'</span>.format(coin.lower()), <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        app = websocket.WebSocketApp(<span class="string">'wss://www.hbg.com/-/s/pro/ws'</span>,</span><br><span class="line">                                      header=self.headers,</span><br><span class="line">                                      on_open=on_open,</span><br><span class="line">                                      on_message=on_message,</span><br><span class="line">                                      on_close=on_close</span><br><span class="line">                                    )</span><br><span class="line">        app.run_forever()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_binance_price</span><span class="params">(self, coin)</span>:</span></span><br><span class="line">        <span class="comment">#币安网 https://www.binance.co/?ref=11295221</span></span><br><span class="line">        r = redis.Redis(connection_pool=redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> coin == <span class="string">'b'</span>:</span><br><span class="line">            coin = <span class="string">'BTCUSDT'</span></span><br><span class="line">        <span class="keyword">elif</span> coin == <span class="string">'e'</span>:</span><br><span class="line">            coin = <span class="string">'ETHUSDT'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'coin only b or e'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_close</span><span class="params">(ws)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> coin == <span class="string">'btcusdt'</span>:</span><br><span class="line">                self.get_biance_price(<span class="string">'b'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.get_biance_price(<span class="string">'e'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(ws, message)</span>:</span></span><br><span class="line">            data = (json.loads(message)[<span class="string">'data'</span>])</span><br><span class="line">            <span class="keyword">for</span> k, i <span class="keyword">in</span> enumerate(data):</span><br><span class="line">            <span class="keyword">if</span> i[<span class="string">'s'</span>] == coin:</span><br><span class="line">                price = i[<span class="string">'c'</span>]</span><br><span class="line">                r.lpush(<span class="string">'Prices:binance:&#123;&#125;'</span>.format(coin.lower()), <span class="string">'&#123;:.2f&#125;'</span>.format(float(price)))</span><br><span class="line">                r.expire(<span class="string">'Prices:binance:&#123;&#125;'</span>.format(coin.lower()), <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        app = websocket.WebSocketApp(<span class="string">"wss://stream2.binance.cloud/stream?streams=!miniTicker@arr@3000ms"</span>,</span><br><span class="line">                                      header=self.headers,</span><br><span class="line">                                      on_message=on_message)</span><br><span class="line">        app.run_forever()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_fcoin_price</span><span class="params">(self,coin)</span>:</span></span><br><span class="line">        <span class="comment"># fcoin https://www.fcoin.com/</span></span><br><span class="line">        r = redis.Redis(connection_pool=redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> coin == <span class="string">'b'</span>:</span><br><span class="line">            coin = <span class="string">'btcusdt'</span></span><br><span class="line">        <span class="keyword">elif</span> coin == <span class="string">'e'</span>:</span><br><span class="line">            coin = <span class="string">'ethusdt'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_close</span><span class="params">(ws)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> coin == <span class="string">'btcusdt'</span>:</span><br><span class="line">                self.get_fcoin_price(<span class="string">'b'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.get_fcoin_price(<span class="string">'e'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(ws, message)</span>:</span></span><br><span class="line">            datas = json.loads(message)</span><br><span class="line">            <span class="keyword">if</span> datas.__contains__(<span class="string">'tickers'</span>):</span><br><span class="line">                datas = datas[<span class="string">'tickers'</span>]</span><br><span class="line">                <span class="keyword">for</span> k, i <span class="keyword">in</span> enumerate(datas):</span><br><span class="line">                    <span class="keyword">if</span> i[<span class="string">'symbol'</span>] == coin:</span><br><span class="line">                        price = (i[<span class="string">'ticker'</span>][<span class="number">0</span>])</span><br><span class="line">                        r.lpush(<span class="string">'Prices:fcoin:&#123;&#125;'</span>.format(coin.lower()), <span class="string">'&#123;:.2f&#125;'</span>.format(float(price)))</span><br><span class="line">                        r.expire(<span class="string">'Prices:fcoin:&#123;&#125;'</span>.format(coin.lower()), <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_open</span><span class="params">(ws)</span>:</span></span><br><span class="line">            ws.send(<span class="string">'&#123;"id": "tickers", "cmd": "sub", "args": ["all-tickers"]&#125;'</span>)</span><br><span class="line">            websocket.enableTrace = <span class="keyword">True</span></span><br><span class="line">            app = websocket.WebSocketApp(<span class="string">"wss://ws.fcoin.com/api/v2/ws"</span>,</span><br><span class="line">                                          header=self.headers,</span><br><span class="line">                                          on_open=on_open,</span><br><span class="line">                                          on_message=on_message,</span><br><span class="line">                                          on_close=on_close</span><br><span class="line">                                         )</span><br><span class="line">            app.run_forever()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_abcc_price</span><span class="params">(self, coin)</span>:</span></span><br><span class="line">        <span class="comment"># abcc https://abcc.com/  #vpn</span></span><br><span class="line">    r = redis.Redis(connection_pool=redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> coin == <span class="string">'b'</span>:</span><br><span class="line">        coin = <span class="string">'btcusdt'</span></span><br><span class="line">    <span class="keyword">elif</span> coin == <span class="string">'e'</span>:</span><br><span class="line">             coin = <span class="string">'ethusdt'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_close</span><span class="params">(ws)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> coin == <span class="string">'btcusdt'</span>:</span><br><span class="line">                self.get_bitforex_price(<span class="string">'b'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.get_bitforex_price(<span class="string">'e'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(ws, message)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(message) &gt; <span class="number">30000</span>:</span><br><span class="line">                price = json.loads(json.loads(message)[<span class="string">'data'</span>])[coin][<span class="string">'last'</span>]</span><br><span class="line">                r.lpush(<span class="string">'Prices:abcc:&#123;&#125;'</span>.format(coin.lower()), <span class="string">'&#123;:.2f&#125;'</span>.format(float(price)))</span><br><span class="line">                r.expire(<span class="string">'Prices:abcc:&#123;&#125;'</span>.format(coin.lower()), <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_open</span><span class="params">(ws)</span>:</span></span><br><span class="line">            ws.send(<span class="string">'&#123;"event":"pusher:subscribe","data":&#123;"channel":"market-global"&#125;&#125;'</span>)</span><br><span class="line">            websocket.enableTrace = <span class="keyword">True</span></span><br><span class="line">            app = websocket.WebSocketApp(<span class="string">"wss://push.abcc.com/app/2d1974bfdde17e8ecd3e7f0f6e39816b?protocol=7&amp;client=js&amp;version=4.2.2&amp;flash=false"</span>,</span><br><span class="line">                                          header=self.headers,</span><br><span class="line">                                          on_open=on_open,</span><br><span class="line">                                          on_message=on_message,</span><br><span class="line">                                          on_close=on_close</span><br><span class="line">                                          )</span><br><span class="line">            app.run_forever()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bitfinex_price</span><span class="params">(self,coin)</span>:</span></span><br><span class="line">        <span class="comment"># bitfinex https://www.bitfinex.com/ #vpn</span></span><br><span class="line">        <span class="comment">#该网站不是通过ws更新数据的，而是循环请求。</span></span><br><span class="line">        r = redis.Redis(connection_pool=redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> coin == <span class="string">'b'</span>:</span><br><span class="line">        coin = <span class="string">'btcusdt'</span></span><br><span class="line">        <span class="keyword">elif</span> coin == <span class="string">'e'</span>:</span><br><span class="line">            coin = <span class="string">'ethusdt'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            url = <span class="string">'https://api.bitfinex.com/v2/tickers?symbols=ALL'</span></span><br><span class="line">            res = requests.get(url, headers=self.headers, proxies=self.proxies).content</span><br><span class="line">            <span class="keyword">if</span> coin == <span class="string">'btcusdt'</span>:</span><br><span class="line">                price = json.loads((bytes.decode(res)))[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">                r.lpush(<span class="string">'Prices:bitfinex:&#123;&#125;'</span>.format(coin.lower()), <span class="string">'&#123;:.2f&#125;'</span>.format(float(price)))</span><br><span class="line">                r.expire(<span class="string">'Prices:bitfinex:&#123;&#125;'</span>.format(coin.lower()), <span class="number">300</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                price = json.loads(bytes.decode(res))[<span class="number">3</span>][<span class="number">1</span>]</span><br><span class="line">                r.lpush(<span class="string">'Prices:bitfinex:&#123;&#125;'</span>.format(coin.lower()), <span class="string">'&#123;:.2f&#125;'</span>.format(float(price)))</span><br><span class="line">                r.expire(<span class="string">'Prices:bitfinex:&#123;&#125;'</span>.format(coin.lower()), <span class="number">300</span>)</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">all_spiders</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#返回所有spider名称的list</span></span><br><span class="line">        <span class="keyword">return</span> filter(<span class="keyword">lambda</span> x: x.startswith(<span class="string">'get_'</span>), dir(self))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    spider_list = list(PriceSpiders().all_spiders())[:]</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">20</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="keyword">for</span> spider <span class="keyword">in</span> spider_list:</span><br><span class="line">            executor.submit(eval(<span class="string">'PriceSpiders().%s'</span> %spider), <span class="string">'b'</span>)</span><br><span class="line">            executor.submit(eval(<span class="string">'PriceSpiders().%s'</span> %spider), <span class="string">'e'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最开始到这里再写个获取redis中的最新价格就可以结束了的，但是又想自己写个websocket server把最新价格实时发送到网站上去。所以，通过socket监听端口，获得请求后创建一个子线程连接websocket。当然，最好是用上次使用的协程，这样占用资源更少，更适合高并发。</p><p>首先是获取最新prices，每两秒更新一次最新的价格，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prices</span><span class="params">(prices)</span>:</span></span><br><span class="line">r = redis.Redis(connection_pool=redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="string">'6379'</span>, db=<span class="number">1</span>))</span><br><span class="line">spider_list = list(PriceSpiders().all_spiders())[:]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">for</span> spider <span class="keyword">in</span> spider_list:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">price = r.lindex(<span class="string">'Prices:%s:btcusdt'</span>% spider.split(<span class="string">'_'</span>)[<span class="number">1</span>], <span class="number">1</span>)</span><br><span class="line">prices[<span class="string">'btcusdt'</span>][spider.split(<span class="string">'_'</span>)[<span class="number">1</span>]] = bytes.decode(price, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">price = r.lindex(<span class="string">'Prices:%s:ethusdt'</span>% spider.split(<span class="string">'_'</span>)[<span class="number">1</span>], <span class="number">1</span>)</span><br><span class="line">prices[<span class="string">'ethusdt'</span>][spider.split(<span class="string">'_'</span>)[<span class="number">1</span>]] = bytes.decode(price, encoding=<span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;接下来编写处理请求的线程,分为两块，一块是握手，实现websocket连接，第二快sendmassage，将需要发送的信息处理成websocket协议信息格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#websocket server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manager</span><br><span class="line"><span class="keyword">from</span> PricesCompare2 <span class="keyword">import</span> PriceSpiders</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">returnCrossDomain</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, connection,prices)</span>:</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.con = connection</span><br><span class="line">        self.isHandleShake = <span class="keyword">False</span></span><br><span class="line">        self.prices = prices</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.isHandleShake:  <span class="comment"># 握手</span></span><br><span class="line">                clientData =self.con.recv(<span class="number">1024</span>)</span><br><span class="line">                print(clientData)</span><br><span class="line">                dataList = clientData.split(<span class="string">b"\r\n"</span>)</span><br><span class="line">                header = &#123;&#125;</span><br><span class="line">                <span class="keyword">for</span> data <span class="keyword">in</span> dataList:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">b": "</span> <span class="keyword">in</span> data:</span><br><span class="line">                    unit = data.split(<span class="string">b": "</span>)</span><br><span class="line">                    header[unit[<span class="number">0</span>]] = unit[<span class="number">1</span>]</span><br><span class="line">                secKey = header[<span class="string">b'Sec-WebSocket-Key'</span>]</span><br><span class="line">                resKey = base64.encodebytes(hashlib.new(<span class="string">"sha1"</span>, secKey + <span class="string">b"258EAFA5-E914-47DA-95CA-C5AB0DC85B11"</span>).digest()).replace(<span class="string">b'\n'</span>, <span class="string">b''</span>)</span><br><span class="line">                response = <span class="string">b'''HTTP/1.1 101 Switching Protocols\r\n'''</span></span><br><span class="line">                response += <span class="string">b'''Upgrade: websocket\r\n'''</span></span><br><span class="line">                response += <span class="string">b'''Connection: Upgrade\r\n'''</span></span><br><span class="line">                response += <span class="string">b'''Sec-WebSocket-Accept: %s\r\n\r\n'''</span> % (resKey,)</span><br><span class="line">                self.con.send(response)</span><br><span class="line">                self.isHandleShake = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                prices = &#123;coin:&#123;source:price <span class="keyword">for</span> source,price <span class="keyword">in</span> self.prices[coin].items()&#125; <span class="keyword">for</span> coin <span class="keyword">in</span> self.prices.keys()&#125;</span><br><span class="line">                self.sendMessage(json.dumps(prices))</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送websocket server报文部分</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendMessage</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        msgLen = len(message)</span><br><span class="line">        backMsgList = []</span><br><span class="line">        backMsgList.append(struct.pack(<span class="string">'B'</span>, <span class="number">129</span>))</span><br><span class="line">        <span class="keyword">if</span> msgLen &lt;= <span class="number">125</span>:</span><br><span class="line">            backMsgList.append(struct.pack(<span class="string">'b'</span>, msgLen))</span><br><span class="line">        <span class="keyword">elif</span> msgLen &lt;= <span class="number">65535</span>:</span><br><span class="line">            backMsgList.append(struct.pack(<span class="string">'b'</span>, <span class="number">126</span>))</span><br><span class="line">            backMsgList.append(struct.pack(<span class="string">'&gt;h'</span>, msgLen))</span><br><span class="line">        <span class="keyword">elif</span> msgLen &lt;= (<span class="number">2</span> ** <span class="number">64</span> - <span class="number">1</span>):</span><br><span class="line">            backMsgList.append(struct.pack(<span class="string">'b'</span>, <span class="number">127</span>))</span><br><span class="line">            backMsgList.append(struct.pack(<span class="string">'&gt;q'</span>, msgLen))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"the message is too long to send in a time"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        message_byte = bytes()</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> backMsgList:</span><br><span class="line">            message_byte += c</span><br><span class="line">        message_byte += bytes(message, encoding=<span class="string">"utf8"</span>)</span><br><span class="line">        self.con.send(message_byte)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(prices)</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.bind((<span class="string">'127.0.0.1'</span>, <span class="number">9001</span>))</span><br><span class="line">    sock.listen(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            connection, address = sock.accept()</span><br><span class="line">            returnCrossDomain(connection, prices).start()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;两个进程，一个进程更新prices，另一个进程像客户端发送最新的prices，所以需要进程间共享变量，这里使用的是multiprocess.Manager,因为它可以很好的支持dict。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#main()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">    manager = Manager()</span><br><span class="line">    prices = manager.dict(&#123;<span class="string">'btcusdt'</span>: manager.dict(&#123;&#125;), <span class="string">'ethusdt'</span>: manager.dict(&#123;&#125;)&#125;)</span><br><span class="line">    plist = []</span><br><span class="line">    p1 = Process(target=get_prices, args=(prices,))</span><br><span class="line">    plist.append(p1)</span><br><span class="line">    p2 = Process(target=server, args=(prices,))</span><br><span class="line">    plist.append(p2)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> plist:</span><br><span class="line">        p.daemon = <span class="keyword">True</span></span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> plist:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;接下来是客户端，建立一个表格，与服务器建立websocket连接，实时接收信息并更新网页，并显示最高值和最低值。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'author'</span> <span class="attr">content</span>=<span class="string">"lk"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>PriceCompare<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>PriceCompare<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"win"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"sources"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"source"</span>&gt;</span>abcc<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"source"</span>&gt;</span>binance<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"source"</span>&gt;</span>bitfinex<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"source"</span>&gt;</span>bitforex<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"source"</span>&gt;</span>fcoin<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"source"</span>&gt;</span>hbg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"coins"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"coin"</span>&gt;</span>btcusdt<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"btcusdt-abcc"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"btcusdt-binance"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"btcusdt-bitfinex"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"btcusdt-bitforex"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"btcusdt-fcoin"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"btcusdt-hbg"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"coins"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"coin"</span>&gt;</span>ethusdt<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"ethusdt-abcc"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"ethusdt-binance"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"ethusdt-bitfinex"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"ethusdt-bitforex"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"ethusdt-fcoin"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"ethusdt-hbg"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"start()"</span>&gt;</span>start<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> ws;</span></span><br><span class="line"><span class="actionscript">                ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:9001'</span>);</span></span><br><span class="line"><span class="actionscript">                ws.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(message)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'td'</span>).css(<span class="string">"color"</span>,<span class="string">"white"</span>);</span></span><br><span class="line"><span class="javascript">                    prices = <span class="built_in">JSON</span>.parse(message[<span class="string">'data'</span>])</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> coin <span class="keyword">in</span> prices) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> max_ = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> min_ = <span class="number">100000</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">for</span> (price <span class="keyword">in</span> prices[coin]) &#123;;</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">if</span> (prices[coin][price] &lt; min_) &#123;</span></span><br><span class="line"><span class="undefined">                                min_ = prices[coin][price];</span></span><br><span class="line"><span class="undefined">                                min_name = price</span></span><br><span class="line"><span class="undefined">                            &#125;</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">else</span> <span class="keyword">if</span> (prices[coin][price] &gt; max_) &#123;</span></span><br><span class="line"><span class="undefined">                                max_ = prices[coin][price];</span></span><br><span class="line"><span class="undefined">                                max_name = price</span></span><br><span class="line"><span class="undefined">                            &#125;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">`.<span class="subst">$&#123;coin&#125;</span>-<span class="subst">$&#123;price&#125;</span>`</span>).text(prices[coin][price])</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">`.<span class="subst">$&#123;coin&#125;</span>-<span class="subst">$&#123;max_name&#125;</span>`</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">`.<span class="subst">$&#123;coin&#125;</span>-<span class="subst">$&#123;min_name&#125;</span>`</span>).css(<span class="string">'color'</span>, <span class="string">'green'</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>演示视频 界面就忽略吧。红色是现在该货币最高价格，绿色为最低价格。</p><iframe height="300" width="400" src="http://player.youku.com/embed/XMzgzMDMxODMyMA==" frameborder="0" 'allowfullscreen'=""></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;通过Pyhton编写爬虫实时爬取各大数字货币交易平台(火币网，币安网等等)的比特币和以太币等等价格，并做价格比对。&lt;br&gt;&lt;img src=&quot;/2018/09/11/PriceCompare/index.png&quot; alt=&quot;img&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Python开发：文献下载管理软件DocManger</title>
    <link href="http://yoursite.com/2018/09/01/2018-09-1-Docmanager/"/>
    <id>http://yoursite.com/2018/09/01/2018-09-1-Docmanager/</id>
    <published>2018-09-01T05:54:20.000Z</published>
    <updated>2018-09-19T12:54:36.411Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;绝大多数文献网站都需要权限才能进行文献下载，高校统一购买了权限，让师生在校内在校园网上免费使用。但是这就意味着学校之外想查阅文献无法立即查阅下载。通过scrapy-redis，把文献相关信息整理入库，并分类将文献下载到本地，实现一个本地文献数据库。<br>&emsp;&emsp;<strong>1.</strong> 项目背景。<br>&emsp;&emsp;<strong>2.</strong> 工具介绍。<br>&emsp;&emsp;<strong>3.</strong> scrapy爬取文献信息集合入redis。<br>&emsp;&emsp;<strong>4.</strong> 将redis中文献集合去重本地已有文献，只留下新文献集合。<br>&emsp;&emsp;<strong>5.</strong> 爬取新文献详细信息。<br>&emsp;&emsp;<strong>6.</strong> 新文献下载。<br>&emsp;&emsp;<strong>7.</strong> 总结。<br><a id="more"></a>  </p><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>&emsp;&emsp;校外无法下载查阅的文献，通过提前将文献批量下载到本地，如果有需要，在本地查询即可。并且所得信息可以获取更多有意思的数据。</p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><h3 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a><a href="&#39;https://doc.scrapy.org/en/latest/intro/tutorial.html&#39;">Scrapy</a></h3><p>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。</p><p>其主要分为5个部分，engine，download，scheduler，spider，pipeline。engine是调度整个爬虫框架其余部件的核心。scheduler管理request，scheduler发送request给download去下载，然后获得response给spider，spider解析网页将新的request给scheduler，将数据item发给pipeline去处理，pipeline做数据处理，存储等工作。</p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><a href="&#39;https://redis.io/&#39;">Redis</a></h3><p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p><p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a><a href="&#39;https://www.mysql.com/&#39;">Mysql</a></h3><p>MySQL 是最流行的关系型数据库管理系统，在WEB应用方面 MySQL 是最好的RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</p><h2 id="scrapy爬取文献信息集合入redis"><a href="#scrapy爬取文献信息集合入redis" class="headerlink" title="scrapy爬取文献信息集合入redis"></a>scrapy爬取文献信息集合入redis</h2><p>&emsp;&emsp;首先说下思路，因为文献每天都有更新，所以如果要再次下新的文献，就得和已在数据库中的文献去重，所以先爬取网站上的文献标题和文献下载地址，然后和数据库中的文献标题做去重，再将这些新文献数据加载到数据库中。为什么不直接将新的数据去重写数据库呢，因为我想在数据库中保留其他的信息，比如文献abstract，而elsevier上搜索列表上没有相关文献的abstract，需要再发送一个get请求才可以获得，所以如果要更新全部的，则每个文献就发一个request，更新就会很慢。所以先做去重，再入库。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#Docmanger目录结构</span><br><span class="line">.</span><br><span class="line">│</span><br><span class="line">├── Docmanager</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── items.py</span><br><span class="line">│   ├── middlewares.py</span><br><span class="line">│   ├── pipelines.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── useragent.py</span><br><span class="line">│   ├── spiders</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── Docmanager.py</span><br><span class="line">│   └── myextensions</span><br><span class="line">│       └──idle.py</span><br><span class="line">├── main.py</span><br><span class="line">├── mysql_to_redis.py</span><br><span class="line">├── redis_to<span class="selector-class">.mysql</span><span class="selector-class">.py</span></span><br><span class="line">├── docdownload.py</span><br><span class="line">└── scrapy.cfg</span><br></pre></td></tr></table></figure> <p>main.py是调度整个程序执行的脚本，从输入key到爬取新的文献信息入库mysql。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#main.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Docmanager</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, num)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.num = num</span><br><span class="line">        self.r = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push_start_urls</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.r.flushdb()</span><br><span class="line">        <span class="keyword">if</span> self.num &lt;= <span class="number">25</span>:</span><br><span class="line">            self.r.lpush(<span class="string">'Docmanager:start_urls'</span>, <span class="string">"https://www.sciencedirect.com/search?qs=%s&amp;show=25&amp;sortBy=relevance&amp;offset=0"</span> % self.key)</span><br><span class="line">        <span class="keyword">elif</span> self.num &lt;= <span class="number">50</span>:</span><br><span class="line">            self.r.lpush(<span class="string">'Docmanager:start_urls'</span>, <span class="string">"https://www.sciencedirect.com/search?qs=%s&amp;show=50&amp;sortBy=relevance&amp;offset=0"</span> % self.key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> offset <span class="keyword">in</span> range(<span class="number">0</span>, self.num + <span class="number">1</span> - <span class="number">100</span>, <span class="number">100</span>):</span><br><span class="line">                self.r.lpush(<span class="string">'Docmanager:start_urls'</span>, <span class="string">"https://www.sciencedirect.com/search?qs=%s&amp;show=100&amp;sortBy=relevance&amp;offset=%d"</span> % (self.key,offset)) </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pool = redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</span><br><span class="line">        self.r = redis.Redis(connection_pool=self.pool)</span><br><span class="line">        self.push_start_urls()</span><br><span class="line">        cmdline.execute((<span class="string">"scrapy crawl Docmanager"</span>).split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    key = <span class="string">'hafnium'</span></span><br><span class="line">    num = <span class="number">5000</span></span><br><span class="line">    <span class="keyword">with</span> ProcessPoolExecutor(max_workers=<span class="number">8</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        executor.submit(Docmanager(key, num).main)</span><br><span class="line">        executor(mysqltoredis(key).main)</span><br><span class="line">        executor.map(main, [key]*<span class="number">3</span>)</span><br></pre></td></tr></table></figure>  <p>&emsp;&emsp;key是文献的关键字，num为想要搜索的文献数量。通过push_start_urls()更具key，num将初始url加载到redis，用来redis开始爬取网页。注意到url中的how为每页文献数量，最高为100<br>接下来我们分析需要的结构性数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#items.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DocItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field() <span class="comment">#文献标题</span></span><br><span class="line">    authors = scrapy.Field() <span class="comment">#文献作者</span></span><br><span class="line">    journal = scrapy.Field() <span class="comment">#文献所发表的杂志名称</span></span><br><span class="line">    date = scrapy.Field() <span class="comment">#文献发表日期</span></span><br><span class="line">    downloadlink = scrapy.Field() <span class="comment">#文献下载链接</span></span><br><span class="line">    link = scrapy.Field() <span class="comment">#文献url</span></span><br><span class="line">    abstractlink = scrapy.Field() <span class="comment">#文献摘要url</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接下来，需要编写spider，因为用得是redis存储，所以用的是RedisSpider。需要在setting增加一些内容，request队列，去重，调度器以及redis的url.<br>另外，为了更加模拟浏览器防止服务器拒绝访问，在downloadmiddleware中添加一个中间件，随机修改请求头的User-Agent。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#middlewares.py  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAgentmiddleware</span><span class="params">(UserAgentMiddleware)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        agent = random.choice(agents) <span class="comment">#agents 是一个列表，包含大量合法的User-Agent</span></span><br><span class="line">        request.headers[<span class="string">"User-Agent"</span>] = agent</span><br></pre></td></tr></table></figure><p>然后修改setting中DOWNLOADER_MIDDLEWARES即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#spider.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DocSpider</span><span class="params">(RedisSpider)</span>:</span></span><br><span class="line">    name = <span class="string">"Docmanager"</span></span><br><span class="line">    redis_key = <span class="string">"Docmanager:start_urls"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(DocSpider, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        soup = BeautifulSoup(response.text)</span><br><span class="line">        soup = soup.find(<span class="string">'div'</span>, class_=<span class="string">'ResultList col-xs-24'</span>)</span><br><span class="line">        docs_soup = soup.ol.find_all(<span class="string">'li'</span>, recursive=<span class="keyword">False</span>)</span><br><span class="line">        rint(len(docs_soup))</span><br><span class="line">        <span class="keyword">for</span> doc_soup <span class="keyword">in</span> docs_soup:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                doc_soup = doc_soup.find(<span class="string">'div'</span>, class_=<span class="string">'result-item-container u-visited-link'</span>).find(<span class="string">'div'</span>, class_=<span class="string">'result-item-content'</span>, recursive=<span class="keyword">False</span>)</span><br><span class="line">                doc = DocItem()</span><br><span class="line">                doc[<span class="string">'title'</span>] = self.gettitle(doc_soup)</span><br><span class="line">                doc[<span class="string">'authors'</span>] = self.getauthors(doc_soup)</span><br><span class="line">                doc[<span class="string">'journal'</span>] = doc_soup.div.find(<span class="string">'a'</span>, class_=<span class="string">'subtype-srctitle-link'</span>).span.string</span><br><span class="line">            doc[<span class="string">'link'</span>] = response.urljoin(doc_soup.find(<span class="string">'h2'</span>,recursive=<span class="keyword">False</span>).a[<span class="string">'href'</span>])</span><br><span class="line">            downloadlink = response.urljoin(doc_soup.find(<span class="string">'div'</span>, class_=<span class="string">'PreviewLinks'</span>).ol.li.span.a[<span class="string">'href'</span>])</span><br><span class="line">                <span class="comment">#有的item是书，不能直接下载，</span></span><br><span class="line">                <span class="keyword">if</span> downloadlink[<span class="number">-1</span>] == <span class="string">'f'</span>:</span><br><span class="line">                    doc[<span class="string">'downloadlink'</span>] = downloadlink</span><br><span class="line">                    <span class="comment">#https://www.sciencedirect.com/search/api/abstract?pii=S1674987118300793</span></span><br><span class="line">                    doc[<span class="string">'abstractlink'</span>] = self.getabstractlink(doc[<span class="string">'downloadlink'</span>])</span><br><span class="line">                    <span class="keyword">yield</span> doc</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">yield</span> doc</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gettitle</span><span class="params">(self, doc_soup)</span>:</span></span><br><span class="line">        <span class="comment">#获得title</span></span><br><span class="line">        ls = list(doc_soup.find(<span class="string">'h2'</span>, recursive=<span class="keyword">False</span>).a.children)</span><br><span class="line">        title = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ls:</span><br><span class="line">            <span class="keyword">if</span> isinstance(i, bs4.element.Tag):</span><br><span class="line">                i = i.string</span><br><span class="line">            <span class="keyword">if</span> i:</span><br><span class="line">                title += i</span><br><span class="line">        <span class="keyword">return</span> title</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getauthors</span><span class="params">(self, doc_soup)</span>:</span></span><br><span class="line">        <span class="comment">#获得author</span></span><br><span class="line">        ls = doc_soup.find(<span class="string">'ol'</span>, class_=[<span class="string">'Authors hor reduce-list'</span>,<span class="string">'Authors hor undefined'</span>]).find_all(<span class="string">'li'</span>, recursive=<span class="keyword">False</span>)</span><br><span class="line">        authors_list = []</span><br><span class="line">        <span class="keyword">for</span> author <span class="keyword">in</span> ls:</span><br><span class="line">            authors_list.append(author.span.string)</span><br><span class="line">        <span class="keyword">return</span> str(authors_list)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getabstractlink</span><span class="params">(self, link)</span>:</span></span><br><span class="line">        <span class="comment">#获得文献abstract链接</span></span><br><span class="line">        pii = re.search(re.compile(<span class="string">r'pii/(.+?)/'</span>), link).group(<span class="number">1</span>)</span><br><span class="line">        abstractlink = <span class="string">'https://www.sciencedirect.com/search/api/abstract?pii=%s'</span> % pii</span><br><span class="line">        <span class="keyword">return</span> abstractlink</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;将item放入pipeline处理，这些item都是从elsevier下载到的最新的num文献数据，还没有摘要信息，首先先要和mysql中已存在的文献对比去重，所以我的想法是，将所有item中title保存在redis一个集合titles，然后根据title:item放入redis中的Hash表items。然后将mysql中的title加载到redis中的一个集合sqltitles。将title和sqltitles并集所得的集合再和sqltitles求差集就可以获得新的文献集合newtitle了。再拿newtitle去和hash表items中取得item入库。代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pipeline.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DocmanagerPipeline</span><span class="params">(RedisPipeline)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(DocmanagerPipeline, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        key0 = item[<span class="string">'title'</span>]</span><br><span class="line">        key2 = <span class="string">'Docmanager:titles'</span></span><br><span class="line">        data1 = json.dumps(dict(item))</span><br><span class="line">        data2 = key0</span><br><span class="line">        <span class="comment">#hash   title: item</span></span><br><span class="line">        self.server.hset(<span class="string">'Docmanager:items'</span>, key0, data1)</span><br><span class="line">        self.server.sadd(key2, data2)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></p><h2 id="将redis中文献集合去重本地已有文献，只留下新文献集合。"><a href="#将redis中文献集合去重本地已有文献，只留下新文献集合。" class="headerlink" title="将redis中文献集合去重本地已有文献，只留下新文献集合。"></a>将redis中文献集合去重本地已有文献，只留下新文献集合。</h2><p>&emsp;&emsp;将数据库key表中已有文献title加载到redis中集合sqltitles。<br>mysql-to-redis.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql-to-redis.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysqltoredis</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment">#通过title将mysql中items和redis中items去重</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.key = <span class="string">'_'</span>.join(key.split(<span class="string">' '</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pushtoredis</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># push the mysql title of docs to redis</span></span><br><span class="line">        cur = self.conn.cursor()</span><br><span class="line">        sql = <span class="string">"SELECT key_word FROM keyword_tbl WHERE key_word=?"</span></span><br><span class="line">        cur.execute(sql.replace(<span class="string">'?'</span>,<span class="string">'%s'</span>), [self.key])</span><br><span class="line">        result = cur.fetchall()</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            sql = <span class="string">"SELECT title From %s"</span> % self.key</span><br><span class="line">            cur.execute(sql)</span><br><span class="line">            <span class="keyword">for</span> title <span class="keyword">in</span> cur.fetchall():</span><br><span class="line">                <span class="comment">#与scrapy_redis.pineline.process_item()一致</span></span><br><span class="line">                self.r.sadd(<span class="string">'Docmanager:sqltitles'</span>, title[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sql = <span class="string">"INSERT INTO keyword_tbl (key_word) VALUES (?)"</span></span><br><span class="line">            cur.execute(sql.replace(<span class="string">'?'</span>, <span class="string">'%s'</span>), [self.key] <span class="keyword">or</span> ())</span><br><span class="line">            self.conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn = pymysql.connect(host=<span class="string">"localhost"</span>, port=<span class="number">3306</span>, user=<span class="string">"root"</span>, passwd=<span class="string">"abc4494355"</span>, db=<span class="string">"docmanager"</span>)</span><br><span class="line">        self.pool = redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</span><br><span class="line">        self.r = redis.Redis(connection_pool=self.pool)</span><br><span class="line">        self.pushtoredis()</span><br></pre></td></tr></table></figure><p>&emsp;&amp;emsp。网页爬取和数据库爬取是分别在两个子进程中同时进行的，但前者比后者需要的时间慢，所以当网页爬取完毕后，就可以进行去重操作。这个操作运用了scrapy自定义扩展功能。这个扩展另外实现在没有新的request一定时间后关闭spider，避免空跑。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#myextension\idle.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoRedisSpiderClose</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, idle_number, crawler)</span>:</span></span><br><span class="line">        self.idle_number = idle_number</span><br><span class="line">        self.idle_list = []</span><br><span class="line">        self.idle_count = <span class="number">0</span></span><br><span class="line">        self.crawler = crawler</span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> crawler.settings.getbool(<span class="string">'MYEXT_ENABLED'</span>):</span><br><span class="line">            <span class="keyword">raise</span> NotConfigured</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">'redis_key'</span> <span class="keyword">in</span> crawler.spidercls.__dict__.keys():</span><br><span class="line">            <span class="keyword">raise</span> NotConfigured(<span class="string">'The type of Spider is not RedisSpider!'</span>)</span><br><span class="line">        idle_number = crawler.settings.getint(<span class="string">'IDLE_NUMBER'</span>, <span class="number">24</span>)</span><br><span class="line">        ext = cls(idle_number, crawler)</span><br><span class="line">        crawler.signals.connect(ext.spider_idle, signal=signals.spider_idle)</span><br><span class="line">        crawler.signals.connect(ext.spider_closed, signal=signals.spider_closed)</span><br><span class="line">        <span class="keyword">return</span> ext</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_closed</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> spider.name != <span class="string">'Docmanager'</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        pool = redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</span><br><span class="line">        re = redis.Redis(connection_pool = pool)</span><br><span class="line">        <span class="keyword">if</span> re.exists(<span class="string">'Docmanager:sqltitles'</span>):</span><br><span class="line">            re.sunionstore(<span class="string">'Docmanager:titles'</span>, <span class="string">'Docmanager:titles'</span>, <span class="string">'Docmanager:sqltitles'</span>)</span><br><span class="line">            re.sdiffstore(<span class="string">'Docmanager:newtitles'</span>, <span class="string">'Docmanager:titles'</span>, <span class="string">'Docmanager:sqltitles'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            re.rename(<span class="string">'Docmanager:titles'</span>,<span class="string">'Docmanager:newtitles'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider_idle</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> spider.name != <span class="string">'Docmanager'</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> spider.server.exists(spider.redis_key):</span><br><span class="line">            self.idle_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.idle_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> self.idle_count &gt; self.idle_number:</span><br><span class="line">            self.crawler.engine.close_spider(spider, <span class="string">'Waiting %d s have no request, spider closed!'</span> % (self.idle_number*<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>然后修改setting中的EXTENSION和MYEXT_ENABLED。</p><p>已去重后的新文献集合(RedisDesktopManager)，从网页爬取5000条文献信息时间为1分钟。<br><img src="/2018/09/01/2018-09-1-Docmanager/redis.png" alt="img">  </p><h2 id="爬取新文献详细信息并入库。"><a href="#爬取新文献详细信息并入库。" class="headerlink" title="爬取新文献详细信息并入库。"></a>爬取新文献详细信息并入库。</h2><p>&emsp;&emsp;接下来需要的就是把留下来的文献集合newtitles中的title一个一个的去items中获得item了，获得item后提取摘要链接获得摘要最后存储到mysql。<br>&emsp;&emsp;文献量是很大的，每个文献都需要发送一个新的request，而网络IO是必须考虑到的，一定需要异步，然后就有以下选择，多进程，多线程，协程以及它们的集合。因为文献量是很大的，而多进程和多线程的都有一定上限，而进程，线程间的上下文转换不及协程，但是一个协程也只有一个线程的资源，所以我选择了多进程+协程的，用到了asyncio，aiohttp以及aiomysql。为什么不用scrapy直接异步爬取呢，其实也可以，不过又得在redis中构建一个hash表，因为爬取的摘要要和对应item对应上，一些文献摘要较长，这样redis中所占内存可能会比较大。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">redis—to-mysql.py  </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_pool</span><span class="params">(loop, **kw)</span>:</span></span><br><span class="line">    <span class="comment">#创建进程池</span></span><br><span class="line">    <span class="keyword">global</span> __pool</span><br><span class="line">    __pool = <span class="keyword">await</span> aiomysql.create_pool(</span><br><span class="line">        host=kw.get(<span class="string">'host'</span>, <span class="string">'127.0.0.1'</span>),</span><br><span class="line">        port=kw.get(<span class="string">'port'</span>, <span class="number">3306</span>),</span><br><span class="line">        user=kw[<span class="string">'user'</span>],</span><br><span class="line">        password=kw[<span class="string">'password'</span>],</span><br><span class="line">        db=kw[<span class="string">'db'</span>],</span><br><span class="line">        charset=kw.get(<span class="string">'charset'</span>, <span class="string">'UTF8MB4'</span>),</span><br><span class="line">        autocommit=kw.get(<span class="string">'autocommit'</span>, <span class="keyword">True</span>),</span><br><span class="line">        maxsize=kw.get(<span class="string">'maxsize'</span>, <span class="number">100</span>),</span><br><span class="line">        minsize=kw.get(<span class="string">'minsize'</span>, <span class="number">1</span>),</span><br><span class="line">        loop=loop</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="comment">#创建一个名为关键字的新表存储信息，如果表已存在则不创建。</span></span><br><span class="line">    <span class="keyword">global</span> __pool</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> __pool.acquire() <span class="keyword">as</span> conn:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cur:</span><br><span class="line">            sql = <span class="string">'CREATE TABLE IF NOT EXISTS %s('</span> \</span><br><span class="line">                  <span class="string">'doc_id INT AUTO_INCREMENT,'</span> \</span><br><span class="line">                  <span class="string">'title VARCHAR(255),'</span> \</span><br><span class="line">                  <span class="string">'authors VARCHAR(255),'</span> \</span><br><span class="line">                  <span class="string">'journal VARCHAR(255),'</span> \</span><br><span class="line">                  <span class="string">'post_data VARCHAR(255),'</span> \</span><br><span class="line">                  <span class="string">'abstract TEXT,'</span> \</span><br><span class="line">                  <span class="string">'link VARCHAR(255),'</span> \</span><br><span class="line">                  <span class="string">'downloadlink VARCHAR(255),'</span> \</span><br><span class="line">                  <span class="string">'PRIMARY KEY (doc_id)'</span> \</span><br><span class="line">                  <span class="string">')ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4'</span> % key</span><br><span class="line">            <span class="keyword">await</span> cur.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">push_to_mysql</span><span class="params">(r, key)</span>:</span></span><br><span class="line">    <span class="comment">#爬取摘要，并把item持久化存储</span></span><br><span class="line">    <span class="keyword">global</span> __pool, num</span><br><span class="line">    <span class="keyword">global</span> stop <span class="comment">#如果没有newtitle了 stop=True</span></span><br><span class="line">    <span class="keyword">if</span> r.exists((<span class="string">'Docmanager:newtitles'</span>)):</span><br><span class="line">        title = r.spop(<span class="string">'Docmanager:newtitles'</span>)</span><br><span class="line">        item = json.loads(r.hget(<span class="string">'Docmanager:items'</span>, title))</span><br><span class="line">        url = item[<span class="string">'abstractlink'</span>]</span><br><span class="line">        <span class="keyword">if</span> url:</span><br><span class="line">            headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>&#125;</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> se:</span><br><span class="line">                <span class="keyword">async</span> <span class="keyword">with</span> se.get(url, headers=headers) <span class="keyword">as</span> res:</span><br><span class="line">                    abstract = <span class="keyword">await</span> res.json()</span><br><span class="line">            item[<span class="string">'abstract'</span>] = abstract[<span class="string">'abstracts'</span>][<span class="number">0</span>][<span class="string">'html'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            item[<span class="string">'abstract'</span>] = <span class="string">'None'</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> __pool.acquire() <span class="keyword">as</span> conn:</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cur:</span><br><span class="line">                args = [item[<span class="string">'title'</span>], item[<span class="string">'authors'</span>], item[<span class="string">'journal'</span>], item[<span class="string">'abstract'</span>],</span><br><span class="line">                        item[<span class="string">'link'</span>], item[<span class="string">'downloadlink'</span>], ]</span><br><span class="line">                sql = <span class="string">'INSERT INTO &#123;tbl&#125;'</span> \</span><br><span class="line">                      <span class="string">'(title, authors, journal, abstract, link, downloadlink)'</span> \</span><br><span class="line">                      <span class="string">'VALUES'</span> \</span><br><span class="line">                      <span class="string">'(?, ?, ?, ?, ?, ?)'</span>.format(tbl=key)</span><br><span class="line">                <span class="keyword">await</span> cur.execute(sql.replace(<span class="string">'?'</span>, <span class="string">'%s'</span>), args)</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        stop = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(r,key,thread_loop)</span>:</span></span><br><span class="line">    <span class="comment">#从newtitle中发布新的爬取任务，而爬取任务在子线程中。</span></span><br><span class="line">    <span class="keyword">global</span> stop, num</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop:</span><br><span class="line">        asyncio.run_coroutine_threadsafe(push_to_mysql(r,key), thread_loop)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.05</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(loop,key)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> stop, num</span><br><span class="line">    stop = <span class="keyword">False</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    r = redis.Redis(connection_pool=redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> r.exists(<span class="string">'Docmanager:newtitles'</span>):</span><br><span class="line">            loop = asyncio.get_event_loop()</span><br><span class="line">            mysqlkw = &#123;<span class="string">'db'</span>: <span class="string">'Docmanager'</span>, <span class="string">'user'</span>: <span class="string">'root'</span>, <span class="string">'password'</span>: <span class="string">'abc4494355'</span>&#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">start_loop</span><span class="params">(th_loop)</span>:</span></span><br><span class="line">                <span class="comment">#运行事件循环， loop以参数的形式传递进来运行</span></span><br><span class="line">                asyncio.set_event_loop(th_loop)</span><br><span class="line">                th_loop.run_forever()</span><br><span class="line"></span><br><span class="line">            thread_loop = asyncio.new_event_loop()</span><br><span class="line">            t2 = threading.Thread(target=start_loop, args=(thread_loop,))</span><br><span class="line">            t2.daemon = <span class="keyword">True</span></span><br><span class="line">            t2.start()</span><br><span class="line">            <span class="keyword">await</span> create_pool(loop, **mysqlkw)</span><br><span class="line">            <span class="keyword">await</span> connect(key)</span><br><span class="line">            <span class="keyword">await</span> task(r, key, thread_loop)</span><br><span class="line">            a = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> r.exists(<span class="string">'Docmanager:newtitles'</span>) <span class="keyword">and</span> <span class="keyword">not</span> r.exists(<span class="string">'Docmanager:titles'</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(key)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    key = <span class="string">'_'</span>.join(key.split(<span class="string">' '</span>))</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(init(loop, key))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里需要提到的是，程序有两个线程运行，主线程只有一个协程，动态加载任务，而子线程中有多个协程(根据主线程创建的和已经完成的)，每个协程完成一个摘要爬取。5000新文献详细信息入库大概1分钟完成。<br><img src="/2018/09/01/2018-09-1-Docmanager/mysql.png" alt="img"></p><h2 id="新的文献下载"><a href="#新的文献下载" class="headerlink" title="新的文献下载"></a>新的文献下载</h2><p>&emsp;&emsp;毕竟要创建本地文献库，那就不得不下载了，刚刚在mysql中我们已经爬取到了title和downloadlink，就可以通过downloadlink下载文献并保存到title中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#downloaddoc.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(args)</span>:</span></span><br><span class="line">    doc,key = args</span><br><span class="line">    filename = doc[<span class="number">0</span>]</span><br><span class="line">    downloadlink = doc[<span class="number">1</span>]</span><br><span class="line">    response = request.urlopen(downloadlink)</span><br><span class="line">    link = re.search(<span class="string">"window\\.location = '(.+?)';"</span>, bytes.decode(response.read(), encoding=<span class="string">'utf8'</span>)).group(<span class="number">1</span>)</span><br><span class="line">    response = request.urlopen(link)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">r"D:\docs\%s\%s.pdf"</span> % (key, filename)) <span class="keyword">and</span> os.path.getsize(<span class="string">r"D:\docs\%s\%s.pdf"</span> % (key, filename)) &gt; <span class="number">1024</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r"D:\docs\%s\%s.pdf"</span> % (key, filename), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = response.read(<span class="number">4096</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            f.write(data)</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(key, number)</span>:</span></span><br><span class="line">    <span class="comment">#key 文献关键词</span></span><br><span class="line">    <span class="comment">#number 文献数量    </span></span><br><span class="line">    os.mkdir(<span class="string">r"D:\docs"</span>) <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">r"D:\docs"</span>) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    os.chdir(<span class="string">r"D:\docs"</span>)</span><br><span class="line">    os.mkdir(<span class="string">r"D:\docs\&#123;&#125;"</span>.format(key)) <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">r"D:\docs\&#123;&#125;"</span>.format(key)) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, db=<span class="string">'docmanager'</span>,user=<span class="string">'root'</span>, passwd=<span class="string">'abc4494355'</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    sql = <span class="string">'SELECT title, downloadlink FROM %s'</span> % <span class="string">'_'</span>.join(key.split(<span class="string">' '</span>))</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    result = cur.fetchmany(number)</span><br><span class="line">    <span class="keyword">with</span> ProcessPoolExecutor(max_workers=<span class="number">20</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        [executor.submit(writer, (doc, key)) <span class="keyword">for</span> doc <span class="keyword">in</span> result]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main(<span class="string">'hafnium'</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;好了，将文献下载到doc中关键字文件夹内，如果下载过的则不会下载。测试100篇文献(200+MB)2分钟下完，和下载一个200MB文档消耗时间相当。<br><img src="/2018/09/01/2018-09-1-Docmanager/doc.png" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;大概内容就这么多了，除了管理和下载外文文献外，其实还可以利用这些信息做下一步的分析，比如统计相关领域的关键词，进行排序后就可以得知目前该领域哪些方向比较热门，还比如统计这个领域大家一般投哪些杂志上等等。</p><ol><li>因为request调度队列，去重都在redis，所以如果数据需求较大，可以共用一个request队列。实现分布式爬虫。</li><li>本次项目主要是以练习为主，熟悉scrapy框架，熟悉redis，mysql操作。</li><li>进一步熟悉python多进程、多线程编程，异步编程等，为以后的项目打下基础。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;绝大多数文献网站都需要权限才能进行文献下载，高校统一购买了权限，让师生在校内在校园网上免费使用。但是这就意味着学校之外想查阅文献无法立即查阅下载。通过scrapy-redis，把文献相关信息整理入库，并分类将文献下载到本地，实现一个本地文献数据库。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;1.&lt;/strong&gt; 项目背景。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;2.&lt;/strong&gt; 工具介绍。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;3.&lt;/strong&gt; scrapy爬取文献信息集合入redis。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;4.&lt;/strong&gt; 将redis中文献集合去重本地已有文献，只留下新文献集合。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;5.&lt;/strong&gt; 爬取新文献详细信息。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;6.&lt;/strong&gt; 新文献下载。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;7.&lt;/strong&gt; 总结。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="项目" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>项目：Python开发自动预约实验软件Gettem</title>
    <link href="http://yoursite.com/2018/07/03/Gettem/"/>
    <id>http://yoursite.com/2018/07/03/Gettem/</id>
    <published>2018-07-03T11:49:03.000Z</published>
    <updated>2018-09-19T12:44:13.599Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;为解决学校电镜实验预约困难影响科研进展，我通过python开发了一个可自动预约电镜实验的程序。以下介绍分为5各部分：<br>&emsp;&emsp;<strong>1.</strong> 项目背景。<br>&emsp;&emsp;<strong>2.</strong> 工具介绍。<br>&emsp;&emsp;<strong>3.</strong> requests模拟登录。<br>&emsp;&emsp;<strong>4.</strong> requests模拟发送请求。<br>&emsp;&emsp;<strong>5.</strong> 优化程序功能，自动化设置时间，并且图形化软件。<br>&emsp;&emsp;<strong>6.</strong> 转换成exe文件，便于操作与分享。<br>&emsp;&emsp;<strong>7.</strong> 总结<br><a id="more"></a>  </p><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>&emsp;&emsp;透射电镜可以算是每个高校学术研究的稀缺资源，尤其在材料领域大多数研究都离不开透射电镜。本校的电镜可预约时间为每周一到周五，上午8:30-11:30和下午14:30-15:30共十个时间段.而每个时间段开放预约时间为前一周该时间段结束时间前后。这种狼多肉少的情况使得大家预约电镜非常困难，甚至有时候课题组两周都约不到一次，科研进展受到影响。所以，这个项目完成后可以很好的解决以上问题。</p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><h3 id="Fiddler"><a href="#Fiddler" class="headerlink" title="Fiddler:"></a><a href="https://www.telerik.com/fiddler" target="_blank" rel="noopener">Fiddler</a>:</h3><p>一款开源的网络抓包工具,简单来说使fidder成为一个客户端与服务器的中间代理，客户端发送request将先发送给fidder，fidder再转发送给服务器，服务器返回的response则先到达fidder再返回客户端。</p><h3 id="Requests"><a href="#Requests" class="headerlink" title="Requests:"></a><a href="http://docs.python-requests.org/zh_CN/latest/" target="_blank" rel="noopener">Requests</a>:</h3><p>一个Python第三方HTTP库，功能全面几乎可以实现任何的http请求任务, 包括GET、OPTIONS、HEAD、POST、PUT、PATCH、DELETE。在这些request中，可根据需要的更改header，body，cookie，data等，操作方便。此外，特别值得一提的是它包含一个会话对象<code>requests.Session()</code>，可以跨请求保持某些参数，例如cookie，不用手动添加cookie. 在对同一个服务器连续的发出请求时，底层的TCP将被复用，就不用每发一个请求重新发送TCP连接请求，使性能显著提高。</p><h3 id="Tkinter"><a href="#Tkinter" class="headerlink" title="Tkinter:"></a><a href="https://docs.python.org/2/library/tkinter.html" target="_blank" rel="noopener">Tkinter</a>:</h3><p>一个Python的标准GUI库。使用Tkinter可以快速的创建GUI应用程序。操作简单，可以满足大多数图形化需求。</p><h2 id="requests模拟登录"><a href="#requests模拟登录" class="headerlink" title="requests模拟登录"></a>requests模拟登录</h2><p>&emsp;&emsp;浏览器打开网站，正常登录。通过fidder抓包。可以发现有以下request<br><img src="/2018/07/03/Gettem/login1.png" alt="img">&emsp;&emsp;可以发现登录发送表单所需数据为userName，password和enter.除此之外，我们还可以发现服务器返回的是302，重定向。继续跟踪可发现还需向目标网址发送一个表单<br><img src="/2018/07/03/Gettem/login2.png" alt="img">&emsp;&emsp;表单需要的数据可以发现在重定向后发送请求中的response中。<br><img src="/2018/07/03/Gettem/login3.png" alt="img">&emsp;&emsp;综上，操作顺序为：发送请求（账号，密码）→在获得的重定向response中抓取信息→再发送请求→登录成功，编写代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request</span><br><span class="line"><span class="comment">#定义会话</span></span><br><span class="line">se = request.Session()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(userName, passWord)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    登录</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    res = se.get(loginurl, timeout=<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">        form_data = &#123;</span><br><span class="line">            <span class="string">"userName"</span>: userName,</span><br><span class="line">            <span class="string">"passWord"</span>: passWord,</span><br><span class="line">            <span class="string">"enter"</span>: <span class="keyword">True</span></span><br><span class="line">                &#125;</span><br><span class="line">        res = se.post(self.loginurl, form_data)</span><br><span class="line">        <span class="comment">#正则抓取toke_id</span></span><br><span class="line">        token_id = search(compile(<span class="string">'&lt;input name="tokenId" type="hidden" value="(.*?)"'</span>), res.content.decode(<span class="string">'utf-8'</span>)).group(<span class="number">1</span>) </span><br><span class="line">        form_data_2 = &#123;</span><br><span class="line">            <span class="string">"tokenId"</span>: token_id,</span><br><span class="line">            <span class="string">"account"</span>: userName,</span><br><span class="line">            <span class="string">"Thirdsys"</span>: <span class="string">"dxsbgxxt"</span></span><br><span class="line">            &#125;</span><br><span class="line">        login_url = <span class="string">'http:/xxxxxx.com'</span></span><br><span class="line">        <span class="comment">#跟进header，测试后其实不改也没关系。这里只是为了模拟浏览器更像一点。</span></span><br><span class="line">        se.update(&#123;<span class="string">'Referer'</span>: <span class="string">'http://xxxxxx.com'</span>&#125;)</span><br><span class="line">        se.post(login_url, form_data_2)</span><br><span class="line">        se.session.cookies.set(<span class="string">'ASP.NET_SessionId'</span>,<span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"><span class="comment">#测试一下</span></span><br><span class="line"><span class="keyword">if</span> __main__ == <span class="string">'__name__'</span>:</span><br><span class="line">    userName = input(<span class="string">'输入账号’)</span></span><br><span class="line"><span class="string">    passWord = input('</span>输入密码<span class="string">')</span></span><br><span class="line"><span class="string">    login(userName, passWord)</span></span><br></pre></td></tr></table></figure><br>&emsp;&emsp;测试完成登录成功，接下来实现模拟浏览器发送表单</p><h2 id="requests模拟发送请求"><a href="#requests模拟发送请求" class="headerlink" title="requests模拟发送请求"></a>requests模拟发送请求</h2><p>&emsp;&emsp;首先分析出表单所需要的数据，通过浏览器预约一个是简单的实验。同样通过fidder抓包分析，在此过程中，我们可以通过断点来判断一共发送了哪些请求，哪些求中是必须的，哪些请求又是可以省去的，因为毕竟我们需要快速预约，所以要把过程做的最精简。通过断点测试我们发现有如下请求发送出去<br><img src="/2018/07/03/Gettem/post1.png" alt="img"><br>&emsp;&emsp;一共7个request…其中有4个post,分析这些post所需数据,分析数据来源,处理成所需数据格式，最终代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderTEM</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    物镜球差电镜预约</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, user, pwd, payload, id_, st, et, sample, project, i)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        定义会话，初始化表单。</span></span><br><span class="line"><span class="string">        params &#123;</span></span><br><span class="line"><span class="string">        user:用户名</span></span><br><span class="line"><span class="string">        pwd: 密码</span></span><br><span class="line"><span class="string">        payload, id_为申请表单所需数据，不同用户数据不同，在注册过程中记录。</span></span><br><span class="line"><span class="string">        st: 预约时间段开始时间</span></span><br><span class="line"><span class="string">        et: 预约时间段结束时间</span></span><br><span class="line"><span class="string">        sample: 样品</span></span><br><span class="line"><span class="string">        project: 项目编号</span></span><br><span class="line"><span class="string">        i: 控制多线程可以均匀发表的编号，i越高，发送请求的开始时间越晚</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.user = user</span><br><span class="line">        self.pwd = pwd</span><br><span class="line">        self.payload = payload</span><br><span class="line">        self.id = id_</span><br><span class="line">        self.st = st</span><br><span class="line">        self.et = et</span><br><span class="line">        self.i = i</span><br><span class="line">        self.session = requests.session()</span><br><span class="line">        self.update = self.session.headers.update</span><br><span class="line">        self.get = self.session.get</span><br><span class="line">        self.post = self.session.post</span><br><span class="line">        self.loginurl = (<span class="string">r'http://xxxxxx.com'</span>)</span><br><span class="line">        self.headers1 = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36'</span>,</span><br><span class="line">           <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">           <span class="string">'Accept-Language'</span>:<span class="string">'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'</span>,</span><br><span class="line">           <span class="string">'Accept'</span>:<span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class="line">           <span class="string">'Upgrade-Insecure-Requests'</span>:<span class="string">'1'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        self.headers2 =  &#123;<span class="string">'Referer'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line">        self.session.headers.update(self.headers1)</span><br><span class="line">        <span class="comment">#初始化申请实验表单</span></span><br><span class="line">        self.form_data_1 = &#123;</span><br><span class="line">                    <span class="string">"_ajax"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">"_object"</span>: <span class="string">"component_form"</span>,</span><br><span class="line">                    <span class="string">"_event"</span>: <span class="string">"submit"</span>,</span><br><span class="line">                    <span class="string">"cal_week_rel"</span>: <span class="string">''</span>,</span><br><span class="line">                    <span class="string">"mode"</span>: <span class="string">"week"</span>,</span><br><span class="line">                    <span class="string">"component_id"</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">"calendar_id"</span>: <span class="number">7</span>,</span><br><span class="line">                    <span class="string">"name123"</span>: <span class="string">"仪器使用预约"</span>,</span><br><span class="line">                    <span class="string">"dtstart"</span>: self.st,</span><br><span class="line">                    <span class="string">"dtend"</span>: self.et,</span><br><span class="line">                    <span class="string">"project"</span>: project,</span><br><span class="line">                    <span class="string">"description"</span>: <span class="string">''</span>,</span><br><span class="line">                    <span class="string">"extra_fields[12]"</span>: sample,</span><br><span class="line">                    <span class="string">"extra_fields[13][块体]"</span>: <span class="string">'null'</span>,</span><br><span class="line">                    <span class="string">'extra_fields[13][粉末]'</span>: <span class="string">'on'</span>,</span><br><span class="line">                    <span class="string">'extra_fields[13][有无磁性]'</span>: <span class="string">'null'</span>,</span><br><span class="line">                    <span class="string">'extra_fields[14][TEM]'</span>: <span class="string">'on'</span>,</span><br><span class="line">                    <span class="string">'extra_fields[14][HRTEM]'</span>: <span class="string">'on'</span>,</span><br><span class="line">                    <span class="string">'extra_fields[14][STEM]'</span>: <span class="string">'null'</span>,</span><br><span class="line">                    <span class="string">'extra_fields[14][STEM+mapping]'</span>: <span class="string">'null'</span>,</span><br><span class="line">                    <span class="string">'extra_fields[14][EDS]'</span>: <span class="string">'null'</span>,</span><br><span class="line">                    <span class="string">'submit'</span>: <span class="string">'save'</span></span><br><span class="line">                    &#125;</span><br><span class="line">        self.form_data_2 = &#123;<span class="string">'_ajax'</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="string">'_object'</span>: <span class="string">'socket'</span>,</span><br><span class="line">                      <span class="string">'_event'</span>: <span class="string">'auth'</span>,</span><br><span class="line">                      <span class="string">'cal_week_rel'</span>: <span class="string">''</span>,</span><br><span class="line">                      <span class="string">'code'</span> : <span class="string">''</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        登录</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        res = self.get(self.loginurl, timeout=<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">            form_data = &#123;</span><br><span class="line">                <span class="string">"userName"</span>: self.user,</span><br><span class="line">                <span class="string">"passWord"</span>: self.pwd,</span><br><span class="line">                <span class="string">"enter"</span>: <span class="keyword">True</span></span><br><span class="line">                    &#125;</span><br><span class="line">            res = self.post(self.loginurl, form_data)</span><br><span class="line">            self.logincookies = self.session.cookies.get_dict()</span><br><span class="line">            token_id = search(compile(<span class="string">'&lt;input name="tokenId" type="hidden" value="(.*?)"'</span>), res.content.decode(<span class="string">'utf-8'</span>)).group(<span class="number">1</span>)</span><br><span class="line">            form_data_3 = &#123;</span><br><span class="line">                <span class="string">"tokenId"</span>: token_id,</span><br><span class="line">                <span class="string">"account"</span>: self.user,</span><br><span class="line">                <span class="string">"Thirdsys"</span>: <span class="string">"dxsbgxxt"</span></span><br><span class="line">                &#125;</span><br><span class="line">            login_url = <span class="string">'http://xxxxxx.com'</span></span><br><span class="line">            self.update(&#123;<span class="string">'Referer'</span>: <span class="string">'http://xxxxx.com'</span>&#125;)</span><br><span class="line">            self.post(login_url, form_data_3)</span><br><span class="line">            self.session.cookies.set(<span class="string">'ASP.NET_SessionId'</span>,<span class="keyword">None</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> <span class="string">'网络异常！'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perpareform</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        爬取目标页面并解析表单所需的数据</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        url = <span class="string">'http://xxxxx.com'</span></span><br><span class="line">        <span class="comment">#??self.session.headers.update(self.headers2)</span></span><br><span class="line">        res1 = self.get(url)</span><br><span class="line">        self.update(&#123;<span class="string">'Referer'</span>: <span class="string">'http://xxxxx.com'</span>, <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="keyword">None</span>&#125;)</span><br><span class="line">        content_1 = res1.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        partern_1 =  compile(<span class="string">'"browser_[^"]+?" src="(http://xxxxx\?browser_id=(.+?)&amp;amp;st=(.+?)&amp;amp;ed=(.+?)&amp;amp;.+?form_token(.+?))"'</span>)</span><br><span class="line">        content_1 = search(partern_1, content_1)</span><br><span class="line">        post_url = content_1.group(<span class="number">1</span>)</span><br><span class="line">        browser_id = content_1.group(<span class="number">2</span>)</span><br><span class="line">        st2 = content_1.group(<span class="number">3</span>)</span><br><span class="line">        ed = content_1.group(<span class="number">4</span>)</span><br><span class="line">        form_token = content_1.group(<span class="number">5</span>)</span><br><span class="line">        post_url = sub(compile(<span class="string">'amp;'</span>),<span class="string">''</span>,post_url)</span><br><span class="line">        res2 = self.get(post_url)</span><br><span class="line">        content_2 = res2.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment">#id="calweek_5b25321017f43" </span></span><br><span class="line">        partern_2 = compile(<span class="string">'id="(calweek_.+?)"'</span>)</span><br><span class="line">        cal_week_rel = search(partern_2,content_2).group(<span class="number">1</span>)</span><br><span class="line">        self.form_data_1[<span class="string">'cal_week_rel'</span> ] = cal_week_rel</span><br><span class="line">        <span class="keyword">return</span> post_url, browser_id, st2, ed, form_token, cal_week_rel</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postform</span><span class="params">(self,post_url, browser_id, st2, ed, form_token, cal_week_rel)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        利用爬取到的数据填写表单并发送多个申请。</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        res3 = self.post(post_url,self.form_data_1)</span><br><span class="line">        self.update(&#123;<span class="string">'Accept'</span>: <span class="string">'*/*'</span>&#125;)</span><br><span class="line">        content_3 = res3.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment">#\" id=\"uuid_5b253c614b5cd\"&gt;\  </span></span><br><span class="line">        uuid = search(compile(<span class="string">r'(uuid_.+?)\\'</span>),content_3).group(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#params = &#123;'EIO': 3, 'transport': 'polling', 't': str(int(datetime.now().timestamp * 10*3)) + '-0'&#125;</span></span><br><span class="line">        res4 = self.session.get(<span class="string">'http://xxxxxx.com'</span>,params=&#123;<span class="string">'EIO'</span>: <span class="string">'3'</span>, <span class="string">'transport'</span>: <span class="string">'polling'</span>, <span class="string">'t'</span>: str(int(datetime.now().timestamp()*(<span class="number">10</span>**<span class="number">3</span>)))+<span class="string">'-0'</span>&#125;)   </span><br><span class="line">        content_4 = res4.content</span><br><span class="line">        sid = search(compile(<span class="string">'"sid":"(.+?)"'</span>),str(content_4)).group(<span class="number">1</span>)</span><br><span class="line">        self.session.get(<span class="string">'http://xxxxxx/socket.io/'</span>,params=&#123;<span class="string">'EIO'</span>: <span class="string">'3'</span>, <span class="string">'transport'</span>: <span class="string">'polling'</span>, <span class="string">'t'</span>: str(int(datetime.now().timestamp()*(<span class="number">10</span>**<span class="number">3</span>)))+<span class="string">'-1'</span>,<span class="string">'sid'</span>: sid&#125;)   </span><br><span class="line">        self.update(&#123;<span class="string">'Origin'</span>: <span class="string">'http://xxxxxx.com'</span>,<span class="string">'Content-Type'</span>: <span class="string">'text/plain;charset=UTF-8'</span>&#125;)</span><br><span class="line">        self.post(<span class="string">'http://xxxxxx/socket.io/'</span>,params=&#123;<span class="string">'EIO'</span>: <span class="string">'3'</span>, <span class="string">'transport'</span>: <span class="string">'polling'</span>, <span class="string">'t'</span>: str(int(datetime.now().timestamp()*(<span class="number">10</span>**<span class="number">3</span>)))+<span class="string">'-2'</span>,<span class="string">'sid'</span>: sid&#125;,data = self.payload)   </span><br><span class="line">        self.update(&#123;<span class="string">'Origin'</span>: <span class="keyword">None</span>, <span class="string">'Content-Type'</span>: <span class="keyword">None</span>&#125;)</span><br><span class="line">        res7 = self.get(<span class="string">'http://xxxxxx/socket.io/'</span>,params=&#123;<span class="string">'EIO'</span>: <span class="string">'3'</span>, <span class="string">'transport'</span>: <span class="string">'polling'</span>, <span class="string">'t'</span>: str(int(datetime.now().timestamp()*(<span class="number">10</span>**<span class="number">3</span>)))+<span class="string">'-3'</span>,<span class="string">'sid'</span>: sid&#125;)   </span><br><span class="line">        content_7 = str(res7.content)</span><br><span class="line">        code = search(compile(<span class="string">'"code":"(.+?)"'</span>),content_7).group(<span class="number">1</span>)</span><br><span class="line">        self.form_data_2[<span class="string">'code'</span>] = code</span><br><span class="line">        res8 = self.post(<span class="string">'http://xxxxxx.com'</span>,data = self.form_data_2)</span><br><span class="line">        content_8 =str(res8.content)</span><br><span class="line">        newcode = search(compile(<span class="string">'"code":"(.+?)"'</span>),content_8).group(<span class="number">1</span>)</span><br><span class="line">        newcode = sub(<span class="string">r'\\'</span>,<span class="string">''</span>,newcode)</span><br><span class="line">        self.update(&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain;charset=UTF-8'</span>&#125;) </span><br><span class="line">        payload2 = <span class="string">r'1048:42["yiqikong-reserv",&#123;"form":"&#123;\"cal_week_rel\":\"%s\",\"mode\":\"week\",\"component_id\":\"0\",\"calendar_id\":\"7\",\"name\":\"\\u4eea\\u5668\\u4f7f\\u7528\\u9884\\u7ea6\",\"dtstart\":%d,\"dtend\":%d,\"project\":\"1074\",\"description\":\"\",\"extra_fields\":&#123;\"12\":\"\",\"13\":&#123;\"\\u5757\\u4f53\":\"on\",\"\\u7c89\\u672b\":\"null\",\"\\u6709\\u65e0\\u78c1\\u6027\":\"null\"&#125;,\"14\":&#123;\"TEM\":\"on\",\"HRTEM\":\"on\",\"STEM\":\"null\",\"STEM+mapping\":\"null\",\"EDS\":\"null\"&#125;&#125;,\"submit\":\"save\",\"browser_id\":\"%s\",\"st\":\"%s\",\"ed\":\"%s\",\"equipment_id\":\"10\",\"form_token\":\"%s\",\"id\":\"7\",\"currentUserId\":\"%s\",\"SITE_ID\":\"cf\",\"LAB_ID\":\"xxx\",\"tube\":\"8fcab38c0b49b43aaf3d13888fe9444066f3940d\",\"uuid\":\"%s\"&#125;","code":"%s"&#125;]'</span> %(cal_week_rel, self.st, self.et, browser_id, st2, ed, form_token, self.id,  uuid, newcode)</span><br><span class="line">        self.post(<span class="string">'http://xxxxxx/socket.io/'</span>,params=&#123;<span class="string">'EIO'</span>: <span class="string">'3'</span>, <span class="string">'transport'</span>: <span class="string">'polling'</span>, <span class="string">'t'</span>: str(int(datetime.now().timestamp()*(<span class="number">10</span>**<span class="number">3</span>)))+<span class="string">'-5'</span>,<span class="string">'sid'</span>: sid&#125;,data = payload2)   </span><br><span class="line">        self.update(&#123;<span class="string">'Content-Type'</span>: <span class="keyword">None</span>&#125;)</span><br></pre></td></tr></table></figure>  </p><p>&emsp;&emsp;最开始没有设置i, 而是直接让10个线程不间断的发送请求，但是测试后发现预约成功率并不高， 分析得知该程序设计为同步发送，所以每次发送请求后必须要等到请求返回才发下一次的请求，而开放预约时间前后因用户请求暴增导致服务器返回请求缓慢，有时候达到了2s以上，这样会导致在预约时间开放之前我发送的表单还没返回的时候开放预约，而此各个线程要等到返回才发送请求，导致预约失败。于是改进程序，通过<code>self.et - datetime.now().timestamp() - 604800 - 20 + self.i * 0.25 &lt; 0  BEGIN POST</code>为每个线程设置发送表单的开始时间,间隔为0.25s循环发送申请。并通过记录开始发送请求到最后返回请求的时间，让线程<code>sleep (max(2.5 - end + start,0))</code>，使各个线程均匀间隔2.5s发送一个请求，总体上实现均匀0.25s发送一次申请，调度程序代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_1</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    调度程序；</span></span><br><span class="line"><span class="string">    登录&gt; 抓取必要元素并填写表单 &gt; 提交表单</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    self.login()</span><br><span class="line">    sleep(<span class="number">10</span>)</span><br><span class="line">    post_url, browser_id, st2, ed, form_token, cal_week_rel = self.perpareform()</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">while</span> self.et - datetime.now().timestamp() - <span class="number">604800</span> - <span class="number">20</span> + self.i * <span class="number">0.25</span> &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    start = datetime.now().timestamp()</span><br><span class="line">                    self.postform(post_url, browser_id, st2, ed, form_token, cal_week_rel)</span><br><span class="line">                    <span class="keyword">if</span> self.et - datetime.now().timestamp() - <span class="number">604800</span> + <span class="number">10</span> &lt; <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    end = datetime.now().timestamp()</span><br><span class="line">                    sleep (max(<span class="number">2.5</span> - end + start,<span class="number">0</span>))</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> self.et - datetime.now().timestamp() - <span class="number">604800</span> + <span class="number">10</span> &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><h2 id="优化程序功能-自动计算预约时间；注册功能；图形化设计"><a href="#优化程序功能-自动计算预约时间；注册功能；图形化设计" class="headerlink" title="优化程序功能; 自动计算预约时间；注册功能；图形化设计"></a>优化程序功能; 自动计算预约时间；注册功能；图形化设计</h2><h3 id="自动计算预约时间"><a href="#自动计算预约时间" class="headerlink" title="自动计算预约时间"></a>自动计算预约时间</h3><p>&emsp;&emsp;因为预约开放时间是固定的，所以每次欲预约的实验时间是可以预算的，即下周上午或者下午，若在11:30之前，预约时间为下周8:30-11:30，超过11:30直到下午5:30，即预约下周下午时间段。所以可以设置一个默认时间，而自定义时间是因为有些同学经过培训可以预约中午或者晚上。添加一个getst模块。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getst</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, opt, equipment = None, ymd = None, date2 = None )</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        opt:用户选择自定义时间还是默认,</span></span><br><span class="line"><span class="string">        equipment:选择设备，因为设备不同中午时间有所</span></span><br><span class="line"><span class="string">        ymd, date2: 用户自定义选择的时间。</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.opt = opt</span><br><span class="line">        self.ymd = ymd</span><br><span class="line">        self.date2 = date2</span><br><span class="line">        self.equipment = equipment</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        默认时间，根据当前时间计算出最近即将开放的时间段。</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        today = datetime.now()</span><br><span class="line">        t = (today.hour,today.minute)</span><br><span class="line">        <span class="keyword">if</span>  t &lt; (<span class="number">11</span>,<span class="number">31</span>):</span><br><span class="line">            st = datetime(today.year, today.month, today.day, <span class="number">8</span>, <span class="number">30</span>, <span class="number">0</span>  ).timestamp() + <span class="number">604800</span></span><br><span class="line">        <span class="keyword">elif</span> t &lt; (<span class="number">17</span>,<span class="number">31</span>):</span><br><span class="line">            st = datetime(today.year, today.month, today.day, <span class="number">14</span>, <span class="number">30</span>, <span class="number">0</span> ).timestamp() + <span class="number">604800</span></span><br><span class="line">        <span class="keyword">else</span>:    </span><br><span class="line">            st = datetime(today.year, today.month, today.day, <span class="number">8</span>, <span class="number">30</span>, <span class="number">0</span> ).timestamp() + <span class="number">691200</span></span><br><span class="line">        <span class="keyword">return</span> int(st)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">userdefined</span><span class="params">(self, ymd, date2, equipment)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        自定义预约时间</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment">#ymd is dict,&#123;'year':year,....&#125;</span></span><br><span class="line">        <span class="keyword">if</span> date2 == <span class="string">'早'</span>:</span><br><span class="line">            st = int(datetime(ymd[<span class="string">'year'</span>], ymd[<span class="string">'month'</span>], ymd[<span class="string">'day'</span>], <span class="number">8</span>, <span class="number">30</span>, <span class="number">0</span>).timestamp())</span><br><span class="line">        <span class="keyword">elif</span> date2 == <span class="string">'下午'</span>:</span><br><span class="line">            st = int(datetime(ymd[<span class="string">'year'</span>], ymd[<span class="string">'month'</span>], ymd[<span class="string">'day'</span>], <span class="number">14</span>, <span class="number">30</span>, <span class="number">0</span>).timestamp())</span><br><span class="line">        <span class="keyword">elif</span> date2 == <span class="string">'晚上'</span>:</span><br><span class="line">            st = int(datetime(ymd[<span class="string">'year'</span>], ymd[<span class="string">'month'</span>], ymd[<span class="string">'day'</span>], <span class="number">19</span>, <span class="number">0</span>, <span class="number">0</span>).timestamp())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> equipment == <span class="string">'1'</span>:</span><br><span class="line">                st = int(datetime(ymd[<span class="string">'year'</span>], ymd[<span class="string">'month'</span>], ymd[<span class="string">'day'</span>], <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>).timestamp())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                st = int(datetime(ymd[<span class="string">'year'</span>], ymd[<span class="string">'month'</span>], ymd[<span class="string">'day'</span>], <span class="number">11</span>, <span class="number">45</span>, <span class="number">0</span>).timestamp())</span><br><span class="line">        <span class="keyword">return</span> int(st)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getst</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        return: start time</span></span><br><span class="line"><span class="string">        根据用户选择默认或自定义</span></span><br><span class="line"><span class="string">        默认则为下一次可预约时间</span></span><br><span class="line"><span class="string">        自定义则约抢任意时间，包括针对管理员的中午时间段和晚上时间段。</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">if</span> self.opt == <span class="string">'userdefind'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.userdefined(self.ymd, self.date2, self.equipment)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.default()</span><br></pre></td></tr></table></figure>  </p><h3 id="多个实验预约整合在一起-多线程"><a href="#多个实验预约整合在一起-多线程" class="headerlink" title="多个实验预约整合在一起; 多线程"></a>多个实验预约整合在一起; 多线程</h3><p>&emsp;&emsp; 以上已经完成了模拟登录，模拟发送表单，自动获得预约时间，下面将整合输入，整合所有实验模块，并实现多线程。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettem</span><span class="params">(name, equipment, sample, project, time, log_, date = None, date2 = None)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    name: 用户名</span></span><br><span class="line"><span class="string">    equipment: 目标设备</span></span><br><span class="line"><span class="string">    sample: 样品名</span></span><br><span class="line"><span class="string">    project: 项目号码</span></span><br><span class="line"><span class="string">    time: 时间选择(默认，自定义)</span></span><br><span class="line"><span class="string">    log_: 日志</span></span><br><span class="line"><span class="string">    date: 自定义日期</span></span><br><span class="line"><span class="string">    date2: 自定义时间段</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#------------------------------------------------------------------------#</span></span><br><span class="line">    <span class="keyword">if</span> time ==<span class="string">'userdefind'</span>:</span><br><span class="line">        st = getst(<span class="string">'userdefind'</span>, equipment, date, date2).getst()</span><br><span class="line">        <span class="keyword">if</span> date2 != <span class="string">'中'</span>:</span><br><span class="line">            et = st + <span class="number">10799</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            et = st + <span class="number">8999</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        st = getst(<span class="string">'default'</span>).getst()</span><br><span class="line">        et = st + <span class="number">10799</span></span><br><span class="line">    <span class="keyword">if</span> equipment == <span class="number">1</span>:</span><br><span class="line">        log_.insert(<span class="string">'end'</span>,<span class="string">'准备预约：球差\n'</span> )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log_.insert(<span class="string">'end'</span>,<span class="string">'准备预约：场发射\n'</span> )</span><br><span class="line">    log_.insert(<span class="string">'end'</span>,<span class="string">'%s\n'</span> % (datetime.fromtimestamp(st).strftime(<span class="string">'%a  %Y-%m-%d %H:%M:%S'</span>)))</span><br><span class="line">    log_.insert(<span class="string">'end'</span>,<span class="string">'%s\n'</span> % (datetime.fromtimestamp(et).strftime(<span class="string">'     %Y-%m-%d %H:%M:%S'</span>)))</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        c = datetime.now().timestamp()</span><br><span class="line">        <span class="comment">#设置子线程开始登录时间为 -40s</span></span><br><span class="line">        <span class="keyword">if</span> et - <span class="number">604800</span> - <span class="number">40</span> &lt; c:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'users.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                userdicts = json.loads(f.read())</span><br><span class="line">            userdict = userdicts[name]</span><br><span class="line">            <span class="keyword">if</span> equipment == <span class="number">1</span>:</span><br><span class="line">                userdict = userdicts[<span class="string">'%s'</span> % name]</span><br><span class="line">                log_.insert(<span class="string">'end'</span>,<span class="string">'开始登录...\n'</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):     </span><br><span class="line">                    a = OrderTEM_1(userdict[<span class="string">'username'</span>],userdict[<span class="string">'pwd'</span>], userdict[<span class="string">'payload'</span>], userdict[<span class="string">'id'</span>], st, et, sample, project, i) </span><br><span class="line">                    p = Thread(target = a.main_1)</span><br><span class="line">                    p.daemon = <span class="keyword">True</span></span><br><span class="line">                    p.start()</span><br><span class="line">                sleep(<span class="number">15</span>)</span><br><span class="line">                log_.insert(<span class="string">'end'</span>,<span class="string">'开始交表...\n'</span>)</span><br><span class="line">            <span class="keyword">elif</span> equipment == <span class="number">2</span>:</span><br><span class="line">                userdict = userdicts[<span class="string">'%s'</span> % name]</span><br><span class="line">                log_.insert(<span class="string">'end'</span>,<span class="string">'开始登录...、\n'</span>)</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                    b = OrderTEM_2(userdict[<span class="string">'username'</span>],userdict[<span class="string">'pwd'</span>], userdict[<span class="string">'payload'</span>], userdict[<span class="string">'id'</span>], st, et, sample, project, j)</span><br><span class="line">                    q = Thread(target = b.main_2)</span><br><span class="line">                    q.daemon = <span class="keyword">True</span></span><br><span class="line">                    q.start()</span><br><span class="line">                sleep(<span class="number">15</span>)</span><br><span class="line">                log_.insert(<span class="string">'end'</span>,<span class="string">'开始交表...\n'</span>)</span><br><span class="line">            sleep(<span class="number">35</span>)</span><br><span class="line">            checkit = check(userdict[<span class="string">'username'</span>], userdict[<span class="string">'pwd'</span>] , st, et , name, equipment)</span><br><span class="line">            checkit.login_check()</span><br><span class="line">            form_data = checkit.perpareform_check()</span><br><span class="line">            dict_ = checkit.checking(form_data)</span><br><span class="line">            content = dict_[<span class="string">'content'</span>]</span><br><span class="line">            name = search(checkit.username, content)</span><br><span class="line">            <span class="keyword">if</span> name:</span><br><span class="line">                log_.insert(<span class="string">'end'</span>,<span class="string">'预约成功'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                log_.insert(<span class="string">'end'</span>,<span class="string">'预约失败'</span>)</span><br><span class="line">            <span class="keyword">break</span>        </span><br><span class="line">        sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;这里面有个多出来的check模块，它的功能是可以检测本次预约是否成功并返回结果，是根据本次目标时间爬取网站上该时间段预约人的名字与用户名对比判断的，比较简单，就不赘述了。</p><h3 id="图形化设计"><a href="#图形化设计" class="headerlink" title="图形化设计"></a>图形化设计</h3><p>&emsp;&emsp;为了方便程序，图形化软件。整合输入参数，除账号之外，预约实验需要添加的信息有时间选择(自定义|默认)，实验选择，样品，项目编号等。通过python自带的Tkinter库简易实现图形化，编写代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gui</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Getten图形化</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        开始运行</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        tem = vartem.get()</span><br><span class="line">        time = vartime.get()</span><br><span class="line">        name = ename.get().strip()</span><br><span class="line">        account = eaccont.get()</span><br><span class="line">        sample = esample.get()</span><br><span class="line">        date = edate.get().strip()</span><br><span class="line">        date2 = comdate2.get()</span><br><span class="line">        project = comproject.get()</span><br><span class="line">        <span class="keyword">if</span> tem <span class="keyword">and</span> time <span class="keyword">and</span> name <span class="keyword">and</span> account <span class="keyword">and</span> sample <span class="keyword">and</span> project:</span><br><span class="line">            <span class="keyword">if</span> time == <span class="string">'userdefind'</span>:</span><br><span class="line">                <span class="keyword">if</span> len(date) == <span class="number">8</span>:</span><br><span class="line">                    date = &#123;<span class="string">'year'</span>:int(date[:<span class="number">4</span>]),<span class="string">'month'</span>:int(date[<span class="number">4</span>:<span class="number">6</span>]),<span class="string">'day'</span>:int(date[<span class="number">6</span>:<span class="number">8</span>])&#125;</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    tk.messagebox.showerror(<span class="string">'错误'</span>, <span class="string">'自定义时间有误?'</span>)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'users.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                userdicts = json.loads(f.read())</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> userdicts:</span><br><span class="line">                <span class="keyword">if</span> account != userdicts[name][<span class="string">'username'</span>]:</span><br><span class="line">                    tk.messagebox.showerror(<span class="string">'错误'</span>,<span class="string">'用户名与账号不匹配'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    th = Thread(target = gettem, args=(name, tem, sample, project, time, log_, date, date2))</span><br><span class="line">                    th.daemon = <span class="keyword">True</span></span><br><span class="line">                    th.start()</span><br><span class="line">                    runbutton.config(state = <span class="string">'disabled'</span>)</span><br><span class="line">                    ename.config(state = <span class="string">'disabled'</span>)</span><br><span class="line">                    eaccont.config(state = <span class="string">'disabled'</span>)</span><br><span class="line">                    esample.config(state = <span class="string">'disabled'</span>)</span><br><span class="line">                    edate.config(state = <span class="string">'disabled'</span>)</span><br><span class="line">                    comdate2.config(state = <span class="string">'disabled'</span>)</span><br><span class="line">                    comproject.config(state = <span class="string">'disabled'</span>)</span><br><span class="line">                    rtem1.config(state = <span class="string">'disabled'</span>)</span><br><span class="line">                    rtem2.config(state = <span class="string">'disabled'</span>)</span><br><span class="line">                    rtime1.config(state = <span class="string">'disabled'</span>)</span><br><span class="line">                    rtime2.config(state = <span class="string">'disabled'</span>)</span><br><span class="line">                    signbutton.config(state = <span class="string">'disabled'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t = tk.messagebox.askokcancel(<span class="string">'注册'</span>,<span class="string">'你还没注册,请先注册吧'</span>)</span><br><span class="line">                <span class="keyword">if</span> t == <span class="keyword">True</span>:</span><br><span class="line">                    sign()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tk.messagebox.showerror(<span class="string">'错误'</span>,<span class="string">'有信息未填，请检查。'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        关闭</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        os._exit(<span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">datef</span><span class="params">()</span>:</span></span><br><span class="line">        edate.config(state = <span class="string">'disable'</span>)</span><br><span class="line">        comdate2.config(state = <span class="string">'disable'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">datef2</span><span class="params">()</span>:</span></span><br><span class="line">        edate.config(state = <span class="string">'normal'</span>)</span><br><span class="line">        comdate2.config(state = <span class="string">'readonly'</span>)</span><br><span class="line">    window = tk.Tk()</span><br><span class="line">    window.title(<span class="string">'Gettem'</span>)</span><br><span class="line">    window.geometry(<span class="string">'200x500+600+150'</span>)</span><br><span class="line">    window.resizable(width = <span class="keyword">False</span>, height = <span class="keyword">False</span>)</span><br><span class="line">    window.protocol(<span class="string">"WM_DELETE_WINDOW"</span>, quit)</span><br><span class="line">    <span class="comment">#框架，图片</span></span><br><span class="line">    mainframe = tk.Frame(window, bg = <span class="string">'White'</span>)</span><br><span class="line">    mainframe.pack(fill = <span class="string">'both'</span>, expand = <span class="number">1</span>)</span><br><span class="line">    <span class="comment">#labels</span></span><br><span class="line">    linfo = tk.Label(mainframe, text = <span class="string">'使用方法\n1.注册，将姓名及账号进行登记。\n2.注册完成后,选择时间。\n  (默认为下次开放时间)\n\</span></span><br><span class="line"><span class="string">3.填写信息，点击开始。\n  (至少提前30s开始)\n4.保持网络，不关机。\n5.组内同学使用,切勿外传。'</span>, justify = <span class="string">'left'</span>, bg = <span class="string">'White'</span>, wraplength = <span class="number">240</span>,font = (<span class="string">'黑体'</span>,<span class="number">8</span>))</span><br><span class="line">    ltem = tk.Label(text=<span class="string">'TEM：'</span>,font=(<span class="string">'黑体'</span>,<span class="number">10</span>), fg = <span class="string">'DeepSkyBlue'</span>, bg = <span class="string">'White'</span>)</span><br><span class="line">    ltime = tk.Label(text = <span class="string">'时间：'</span>,font=(<span class="string">'黑体'</span>,<span class="number">10</span>), fg = <span class="string">'DeepSkyBlue'</span>, bg = <span class="string">'White'</span>)</span><br><span class="line">    lname = tk.Label(text = <span class="string">'名字：'</span>, font=(<span class="string">'黑体'</span>,<span class="number">10</span>), fg = <span class="string">'DeepSkyBlue'</span>, bg = <span class="string">'White'</span>)</span><br><span class="line">    laccont = tk.Label(text = <span class="string">'账号：'</span>, font=(<span class="string">'黑体'</span>,<span class="number">10</span>), fg = <span class="string">'DeepSkyBlue'</span>, bg = <span class="string">'White'</span>)</span><br><span class="line">    lsample = tk.Label(text = <span class="string">'样品：'</span>, font=(<span class="string">'黑体'</span>,<span class="number">10</span>), fg = <span class="string">'DeepSkyBlue'</span>, bg = <span class="string">'White'</span>)</span><br><span class="line">    ldate = tk.Label(text = <span class="string">'日期：'</span>, font=(<span class="string">'黑体'</span>,<span class="number">10</span>), fg = <span class="string">'DeepSkyBlue'</span>, bg = <span class="string">'White'</span>)</span><br><span class="line">    lparoject = tk.Label(text = <span class="string">'项目：'</span>, font=(<span class="string">'黑体'</span>,<span class="number">10</span>), fg = <span class="string">'DeepSkyBlue'</span>, bg = <span class="string">'White'</span>)</span><br><span class="line">    linfo.place(x = <span class="number">6</span>, y = <span class="number">2</span>)</span><br><span class="line">    ltem.place(x = <span class="number">8</span>, y = <span class="number">110</span>)</span><br><span class="line">    ltime.place(x = <span class="number">8</span>, y = <span class="number">145</span>)</span><br><span class="line">    lname.place(x = <span class="number">8</span>, y = <span class="number">180</span>)</span><br><span class="line">    laccont.place(x = <span class="number">8</span>, y = <span class="number">215</span>)</span><br><span class="line">    lsample.place(x = <span class="number">8</span>, y = <span class="number">250</span>)</span><br><span class="line">    ldate.place(x = <span class="number">8</span>, y = <span class="number">285</span>)    </span><br><span class="line">    lparoject.place(x = <span class="number">8</span>, y = <span class="number">320</span>)</span><br><span class="line">    <span class="comment">#选择按钮</span></span><br><span class="line">    vartem = tk.IntVar()</span><br><span class="line">    vartime = tk.StringVar()</span><br><span class="line">    vartem.set(<span class="number">1</span>)</span><br><span class="line">    vartime.set(<span class="string">'default'</span>)</span><br><span class="line">    rtem1 = tk.Radiobutton(text = <span class="string">'球差'</span>, bg = <span class="string">'White'</span>, variable = vartem, value = <span class="number">1</span>)</span><br><span class="line">    rtem2 = tk.Radiobutton(text = <span class="string">'场发射'</span>, bg = <span class="string">'White'</span>, variable = vartem, value = <span class="number">2</span>)</span><br><span class="line">    rtime1 = tk.Radiobutton(text = <span class="string">'默认'</span>, bg = <span class="string">'White'</span>, variable = vartime, value = <span class="string">'default'</span>, command = datef)</span><br><span class="line">    rtime2 = tk.Radiobutton(text = <span class="string">'自定义'</span>, bg = <span class="string">'White'</span>, variable = vartime, value = <span class="string">'userdefind'</span>, command = datef2)</span><br><span class="line">    rtem1.place(x = <span class="number">60</span>, y = <span class="number">107</span>)</span><br><span class="line">    rtem2.place(x = <span class="number">115</span>, y = <span class="number">107</span>)</span><br><span class="line">    rtime1.place(x = <span class="number">60</span>, y = <span class="number">142</span>)</span><br><span class="line">    rtime2.place(x = <span class="number">115</span>, y = <span class="number">142</span>)</span><br><span class="line">    vardate = tk.StringVar()</span><br><span class="line">    vardate.set((datetime.now() + timedelta(days=<span class="number">7</span>)).strftime(<span class="string">'%Y%m%d'</span>))</span><br><span class="line">    <span class="comment">#输入entry</span></span><br><span class="line">    ename = tk.Entry(bg = <span class="string">'Lightyellow'</span>, width = <span class="number">15</span>, font = (<span class="string">'黑体'</span>,<span class="number">11</span>), highlightcolor = <span class="string">'DeepSkyBlue'</span>,</span><br><span class="line">                     justify = <span class="string">'center'</span>,highlightthickness = <span class="number">1</span>)</span><br><span class="line">    eaccont = tk.Entry(bg = <span class="string">'Lightyellow'</span>, width = <span class="number">15</span>, font = (<span class="string">'黑体'</span>,<span class="number">11</span>), highlightcolor = <span class="string">'DeepSkyBlue'</span>,</span><br><span class="line">                       justify = <span class="string">'center'</span>,highlightthickness = <span class="number">1</span>)</span><br><span class="line">    esample = tk.Entry(bg = <span class="string">'Lightyellow'</span>, width = <span class="number">15</span>, font = (<span class="string">'黑体'</span>,<span class="number">11</span>), highlightcolor = <span class="string">'DeepSkyBlue'</span>,</span><br><span class="line">                       justify = <span class="string">'center'</span>,highlightthickness = <span class="number">1</span>)</span><br><span class="line">    edate = tk.Entry(bg = <span class="string">'Lightyellow'</span>, width = <span class="number">12</span>, font = (<span class="string">'黑体'</span>,<span class="number">8</span>), highlightcolor = <span class="string">'DeepSkyBlue'</span>,</span><br><span class="line">                     justify = <span class="string">'center'</span>,highlightthickness = <span class="number">1</span>, textvariable = vardate, state = <span class="string">'disable'</span>)</span><br><span class="line">    ename.place(x = <span class="number">60</span>, y = <span class="number">180</span>, heigh = <span class="number">25</span>)</span><br><span class="line">    eaccont.place(x = <span class="number">60</span>, y = <span class="number">215</span>, heigh = <span class="number">25</span>)</span><br><span class="line">    esample.place(x = <span class="number">60</span>, y = <span class="number">250</span>, heigh = <span class="number">25</span>)</span><br><span class="line">    edate.place(x = <span class="number">60</span>, y = <span class="number">285</span>, heigh = <span class="number">25</span>)</span><br><span class="line">    <span class="comment">#下拉菜单：project 和 早中晚</span></span><br><span class="line">    vardate2 = StringVar()</span><br><span class="line">    comdate2 = ttk.Combobox(mainframe, width = <span class="number">4</span>, justify = <span class="string">'center'</span>, font = (<span class="string">'宋体'</span>,<span class="number">8</span>), textvariable = vardate2, state = <span class="string">'disable'</span>)</span><br><span class="line">    comdate2[<span class="string">'value'</span>] = (<span class="string">'早'</span>, <span class="string">'中'</span>, <span class="string">'下午'</span>, <span class="string">'晚上'</span>)</span><br><span class="line">    comdate2.place(x = <span class="number">140</span>, y = <span class="number">286</span>, heigh = <span class="number">23</span>)</span><br><span class="line">    comdate2.current(<span class="number">1</span>)</span><br><span class="line">    varproject = IntVar()</span><br><span class="line">    comproject = ttk.Combobox(mainframe, width = <span class="number">17</span>, justify = <span class="string">'center'</span>, font = (<span class="string">'宋体'</span>,<span class="number">8</span>), textvariable = varproject)</span><br><span class="line">    comproject[<span class="string">'value'</span>] = (<span class="number">1074</span>, <span class="number">1084</span>, <span class="number">1180</span>)</span><br><span class="line">    comproject.place(x = <span class="number">60</span>, y = <span class="number">319</span>, heigh = <span class="number">23</span>)</span><br><span class="line">    comproject.current(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#buttons</span></span><br><span class="line">    runbutton = tk.Button(width = <span class="number">8</span>, height = <span class="number">1</span>, text = <span class="string">'开始'</span>, font = (<span class="string">'黑体'</span>, <span class="number">11</span>), bg = <span class="string">'Aliceblue'</span>, fg = <span class="string">'DeepSkyBlue'</span>, relief = <span class="string">'ridge'</span>, bd = <span class="number">2</span>, cursor = <span class="string">'target'</span>, command = run)</span><br><span class="line">    signbutton = tk.Button(text = <span class="string">'注册'</span>, font = (<span class="string">'黑体'</span>, <span class="number">9</span>), bg = <span class="string">'White'</span>, fg = <span class="string">'Red'</span>, bd = <span class="number">0</span>,  cursor = <span class="string">'target'</span>, command = sign)</span><br><span class="line">    runbutton.place(x = <span class="number">60</span>, y = <span class="number">350</span>)</span><br><span class="line">    signbutton.place(x = <span class="number">150</span>, y = <span class="number">360</span>)</span><br><span class="line">    log_ = scrolledtext.ScrolledText(width = <span class="number">250</span>, height = <span class="number">10</span>, font = (<span class="string">'宋体'</span>, <span class="number">10</span>, <span class="string">' bold'</span>), relief = <span class="string">'sunken'</span>, bg = <span class="string">'Lightyellow'</span>, wrap=tk.WORD)</span><br><span class="line">    log_.place(y = <span class="number">390</span>)</span><br><span class="line">    window.mainloop()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    账号注册</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">user_sign_check</span><span class="params">(event)</span>:</span></span><br><span class="line">        sign_user_pwd = enew_pwd.get()</span><br><span class="line">        sign_user_name = enew_username.get()</span><br><span class="line">        sign_user_account = enew_account.get()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (sign_user_pwd <span class="keyword">and</span> sign_user_name <span class="keyword">and</span> sign_user_account):</span><br><span class="line">            tk.messagebox.showerror(<span class="string">'错误'</span>, <span class="string">'请完整填写信息'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(<span class="string">'users.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    userdicts = json.loads(f.read())</span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                <span class="keyword">with</span> open(<span class="string">'users.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    userdicts = &#123;<span class="string">'name'</span>: &#123;&#125;&#125;</span><br><span class="line">                    t = json.dumps(userdicts)</span><br><span class="line">                    f.write(t)</span><br><span class="line">            <span class="keyword">if</span> sign_user_name <span class="keyword">in</span> userdicts:</span><br><span class="line">                tk.messagebox.showerror(<span class="string">'错误'</span>, <span class="string">'你已经注册过了...'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                st = getst(<span class="string">'default'</span>).default()</span><br><span class="line">                et = st + <span class="number">10799</span></span><br><span class="line">                <span class="comment">#b = OrderTEM_2(userdict['username'],userdict['pwd'], userdict['payload'], userdict['id'], st, et, sample, project, j)</span></span><br><span class="line">                check_ = OrderTEM_1(sign_user_account, sign_user_pwd, <span class="string">''</span>, <span class="string">''</span>, st, et,<span class="string">'hf'</span> , <span class="number">1000</span>, <span class="number">0</span>)</span><br><span class="line">                t = check_.login_sign()</span><br><span class="line">                <span class="keyword">if</span> t == <span class="number">-2</span>:</span><br><span class="line">                    tk.messagebox.showerror(<span class="string">'错误'</span>,<span class="string">'网络异常，请检查'</span>)</span><br><span class="line">                <span class="keyword">elif</span> t == <span class="number">-1</span>:</span><br><span class="line">                    tk.messagebox.showerror(<span class="string">'错误'</span>, <span class="string">'账号不存在或密码错误'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    id_ = t</span><br><span class="line">                    post_url, browser_id, st2, ed, form_token, cal_week_rel = check_.perpareform_1()</span><br><span class="line">                    payload = check_.get_payload(post_url, browser_id, st2, ed, form_token, cal_week_rel)</span><br><span class="line">                    userdicts[sign_user_name] = &#123;<span class="string">'username'</span>:sign_user_account, <span class="string">'pwd'</span>:sign_user_pwd, <span class="string">'payload'</span>:payload, <span class="string">'id'</span>:id_&#125;</span><br><span class="line">                    <span class="keyword">with</span> open(<span class="string">'users.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        t = json.dumps(userdicts)</span><br><span class="line">                        f.write(t)</span><br><span class="line">                    tk.messagebox.showinfo(<span class="string">'OK'</span>, <span class="string">'注册成功！'</span>)</span><br><span class="line">                    win_sign.destroy()</span><br><span class="line">    win_sign = tk.Toplevel()</span><br><span class="line">    win_sign.title(<span class="string">'注册'</span>)</span><br><span class="line">    win_sign.geometry(<span class="string">'250x200+650+300'</span>)</span><br><span class="line">    mainframe = tk.Frame(win_sign, bg = <span class="string">'White'</span>)</span><br><span class="line">    mainframe.pack(fill=<span class="string">'both'</span> ,expand=<span class="number">1</span>)</span><br><span class="line">    lname = tk.Label(win_sign,text=<span class="string">'*姓名：'</span>,font=(<span class="string">'黑体'</span>,<span class="number">10</span>), fg = <span class="string">'DeepSkyBlue'</span>, bg = <span class="string">'White'</span>)</span><br><span class="line">    laccount = tk.Label(win_sign, text = <span class="string">'*账号：'</span>,font=(<span class="string">'黑体'</span>,<span class="number">10</span>), fg = <span class="string">'DeepSkyBlue'</span>, bg = <span class="string">'White'</span>)</span><br><span class="line">    lpwd = tk.Label(win_sign, text = <span class="string">'*密码：'</span>, font=(<span class="string">'黑体'</span>,<span class="number">10</span>), fg = <span class="string">'DeepSkyBlue'</span>, bg = <span class="string">'White'</span>)</span><br><span class="line">    lname.place(x = <span class="number">10</span>, y = <span class="number">20</span>)</span><br><span class="line">    laccount.place(x = <span class="number">10</span>, y = <span class="number">60</span>)</span><br><span class="line">    lpwd.place(x = <span class="number">10</span>, y = <span class="number">100</span>)</span><br><span class="line">    enew_username = tk.Entry(win_sign, bg = <span class="string">'Lightyellow'</span>, width = <span class="number">20</span>, font = (<span class="string">'黑体'</span>,<span class="number">11</span>), highlightcolor = <span class="string">'DeepSkyBlue'</span>,</span><br><span class="line">               justify = <span class="string">'center'</span>,highlightthickness = <span class="number">1</span>)</span><br><span class="line">    enew_account = tk.Entry(win_sign, bg = <span class="string">'Lightyellow'</span>, width = <span class="number">20</span>, font = (<span class="string">'黑体'</span>,<span class="number">11</span>), highlightcolor = <span class="string">'DeepSkyBlue'</span>,</span><br><span class="line">               justify = <span class="string">'center'</span>,highlightthickness = <span class="number">1</span>)</span><br><span class="line">    enew_pwd = tk.Entry(win_sign, bg = <span class="string">'Lightyellow'</span>, width = <span class="number">20</span>, font = (<span class="string">'黑体'</span>,<span class="number">11</span>), highlightcolor = <span class="string">'DeepSkyBlue'</span>,</span><br><span class="line">               justify = <span class="string">'center'</span>,highlightthickness = <span class="number">1</span>,show = <span class="string">'*'</span>)</span><br><span class="line">    enew_username.place(x = <span class="number">60</span>, y = <span class="number">20</span>, heigh = <span class="number">25</span>)</span><br><span class="line">    enew_account.place(x = <span class="number">60</span>, y = <span class="number">60</span>, heigh = <span class="number">25</span>)</span><br><span class="line">    enew_pwd.place(x = <span class="number">60</span>, y = <span class="number">100</span>, heigh = <span class="number">25</span>)</span><br><span class="line">    signbutton = tk.Button(win_sign, text=<span class="string">'注册'</span>,font=(<span class="string">'黑体'</span>,<span class="number">14</span>), fg = <span class="string">'DeepSkyBlue'</span>, bg = <span class="string">'White'</span>, relief = <span class="string">'ridge'</span>, bd = <span class="number">0</span>, command = (<span class="keyword">lambda</span> : user_sign_check(<span class="number">1</span>)))</span><br><span class="line">    signbutton.place(x = <span class="number">100</span>, y = <span class="number">140</span>)</span><br><span class="line">    enew_username.bind(<span class="string">"&lt;Return&gt;"</span>, user_sign_check)</span><br><span class="line">    enew_pwd.bind(<span class="string">"&lt;Return&gt;"</span>, user_sign_check)</span><br><span class="line">    enew_account.bind(<span class="string">"&lt;Return&gt;"</span>, user_sign_check)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>&emsp;&emsp;考虑到程序安全性，可以先把交给课题组某个同学负责，然后其他同学都可以让负责的同学帮忙预约实验，而添加注册功能就可以同学第一次先注册后，以后则不用告诉负责同学密码，只需输入姓名和账户名即可，这样不仅保护了同学密码，也保护了软件。<br>&emsp;&emsp;主要界面<br><img src="/2018/07/03/Gettem/run.png" alt="img"><br>&emsp;&emsp;注册界面<br><img src="/2018/07/03/Gettem/sign.png" alt="img"><br>&emsp;&emsp;开始运行<br><img src="/2018/07/03/Gettem/run2.png" alt="img"></p><h2 id="转换成exe文件，便于操作与分享。"><a href="#转换成exe文件，便于操作与分享。" class="headerlink" title="转换成exe文件，便于操作与分享。"></a>转换成exe文件，便于操作与分享。</h2><p>&emsp;&emsp;通过pyInstaller将py转换成exe，需要安装pywin32库。在命令行中输入<code>python pyinstaller.py -F Gettem.py</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;好了，基本工作就到此就基本完成了。接下来就是测试这个程序好不好使，至少到目前为止，共预约5次，每次都成功预约，成功率达到100%。如果以后要改进程序的话，可以从以下几个方面考虑：  </p><ol><li>增加线程数，经测试，增加线程可以一定程度上提高提交频率，但有上限值，因为网络瓶颈。</li><li>将同步改成异步，使得每次发送请求后不用等到返回，在一定时间内继续发送，这样不仅可以提高提交频率并且可以使发送请求的时间间隔更加均匀。但这将要大刀阔斧更改程序，还需要把多线程改为多进程，需要一定工作量。</li><li>将多线程转换成多进程，因为python的GIL锁缘故，多线程并不是真正意义上的多线程，只是并发了，那为什么这里要设置多线程呢，因为在一个线程发送请求时还没返回时这是一个I/O操作，这个等待的时间就会让其他线程去发送请求了，所以还是可以提高发送请求速度。但CPU还是只用一个CPU，而如果用多进程的话，就可以更大利用资源，不过Gettem需要CPU资源实在很少，所以多进程的作用不太理想。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;为解决学校电镜实验预约困难影响科研进展，我通过python开发了一个可自动预约电镜实验的程序。以下介绍分为5各部分：&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;1.&lt;/strong&gt; 项目背景。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;2.&lt;/strong&gt; 工具介绍。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;3.&lt;/strong&gt; requests模拟登录。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;4.&lt;/strong&gt; requests模拟发送请求。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;5.&lt;/strong&gt; 优化程序功能，自动化设置时间，并且图形化软件。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;6.&lt;/strong&gt; 转换成exe文件，便于操作与分享。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;7.&lt;/strong&gt; 总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="项目" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/17/python/"/>
    <id>http://yoursite.com/2018/05/17/python/</id>
    <published>2018-05-17T10:26:26.000Z</published>
    <updated>2018-08-31T11:54:54.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-World！"><a href="#Hello-World！" class="headerlink" title="Hello World！"></a>Hello World！</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-World！&quot;&gt;&lt;a href=&quot;#Hello-World！&quot; class=&quot;headerlink&quot; title=&quot;Hello World！&quot;&gt;&lt;/a&gt;Hello World！&lt;/h2&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
